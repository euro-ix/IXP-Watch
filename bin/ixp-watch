#!/bin/bash
# ixp-watch version: 1.16a
# This file is part of IXP Watch
#
# IXP Watch is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, version v2.0 of the License.
#
# IXP Watch is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License v2.0
# along with IXP Watch If not, see:
#
# http://www.gnu.org/licenses/gpl-2.0.html

################################################################################
#### Local configuration. Things you WILL need to check                        #
################################################################################

# Where is config vars file:
CONFIG=/etc/ixpwatch/config.sh

# Config file can also be specified from the command line with -c <filename>:
optstring=":c:"

while getopts ${optstring} arg; do
  case "${arg}" in
    c)
            # Set config file:
            CONFIG=${OPTARG}
    ;;
  esac
done

function die()
{
    printf '%s\n' "$1" >&2
    exit 1
}

function required_vars()
{

 local vars=$1
 local ndef

 for var in $vars; do
         if [ -z "${!var}" ] ; then
         local ndef="$ndef $var"
         fi
 done

 if [ -n "$ndef" ] ; then 
   die "Required variable(s) not defined:$ndef"
 fi

}

if [ ! -f $CONFIG ] ; then
 die "Could not open config file $CONFIG!"
fi

source $CONFIG

# check all required variables before continuing:
required_vars "CONFIG SAMPLE_ROOT LOG_ROOT TEMP_DIR TSHARK GZIP CAP_INTERFACE SAMPLE_TIME NETWORK ARP_WARNLEVEL MAX_SAMPLE_SIZE ENORMOUS_SAMPLE"

function cleanup()
{
  rm -f $TEMP_DIR/*.err.$$
  rm -f $TEMP_DIR/*.$$
  rm -f $LOG_ROOT/SNMP.LOG
}

function cleanexit()
{
  cleanup
  exit 1
}

# trap ctrl-c:
trap 'cleanexit' SIGINT

function die()
{
    printf '%s\n' "$1" >&2
    cleanup
    exit 1
}

function do_alert()
{

 local level=$1
 local text=$2
 local inc_file=$3
 local email_file=$4

 # Log from text or file:
 local syslog_msg="[$NETWORK] $text"
 local pager_msg="[$NETWORK] $text"
 local email_msg="[$NETWORK] $text"

 if [ -n "$inc_file" ] && [ -f "$inc_file" ] ; then
   syslog_msg="-f $inc_file"
   pager_msg=" $(head -1 $inc_file)"
   email_msg="$(cat $inc_file)"
 fi

 if [ -n "$email_file" ] && [ -f "$email_file" ] ; then
   # add copy of report/something else to the email output only:
   email_msg="$email_msg\n$(cat $email_file)"

 fi

 ### PAGER ALERTS ############################################################
 
  if [ -n "$ALARM_PAGER" ] && [ "$level" = "CRITICAL" ] ; then
    echo "$pager_msg" | $MAILPROG -s "[$NETWORK] $level: $text" $ALARM_PAGER
    if [ $? != 0 ] ; then echo "WARN: $MAILPROG failed for ALARM_PAGER $ALARM_PAGER" >&2 ; fi
  fi

 ### EMAIL ALERTS ############################################################

  if [ -n "$ALARM_EMAIL" ] ; then
    echo -e "$email_msg" | $MAILPROG -s "[$NETWORK] $level: $text" $ALARM_EMAIL
    if [ $? != 0 ] ; then echo "WARN: $MAILPROG failed for ALARM_EMAIL $ALARM_EMAIL" >&2 ; fi
  fi

 ### LOCAL SYSLOG ############################################################
  if [ -n "$LOCAL_FACIL" ] ; then
    $LOGGER -p $LOCAL_FACIL -e -t ixp-watch $syslog_msg
    if [ $? != 0 ] ; then echo "WARN: $LOGGER failed for LOCAL_FACIL $LOCAL_FACIL" >&2 ; fi
  fi

 ### REMOTE SYSLOG ###########################################################
  if [ -n "$LOGHOSTS" ] && [ -n "$LOG_FACILITY" ] ; then
    for host in $LOGHOSTS
    do
     :
    $LOGGER -p $LOG_FACILITY -e -n $host -t ixp-watch $syslog_msg
    if [ $? != 0 ] ; then echo "WARN: $LOGGER failed for: $host $LOG_FACILITY" >&2 ; fi
    done
  fi

 ### SLACK ALERT #############################################################
  if [ -n "$SLACK_ALERTER" ] && [ -x "$SLACK_ALERTER" ] ; then

    local color="danger"
    if [ $level = "WARNING" ] ; then local color="warning" ; fi
    if [ $level = "GOOD" ] ; then local color="good" ; fi

    if [ -n "$inc_file" ] && [ -f "$inc_file" ] ; then

      while read -r line; do
         echo -e "$text : $line" | $SLACK_ALERTER $SLACK_ALERTER_OPTS -t $color
      done <$inc_file

    else
       echo -e "$text" | $SLACK_ALERTER $SLACK_ALERTER_OPTS -t $color
    fi

  fi

 rm -f $inc_file

 # die on fatal alerts:
 if [ $level = "FATAL" ] ; then die "$level: $text" ; fi

}


function log_error {

 local level=$1
 local text=$2

 echo "** $level: $text" >&2
 echo "$text" >> ${TEMP_DIR}/${level}.err.$$

}

function check_errors {

  local text=$1

  if [ -z "$text" ] ; then
   local text="*** Script error(s) occurred"
  fi

  # If errors logged by log_error files, do something with:
  local warnfile="${TEMP_DIR}/WARNING.err.$$"
  local fatalfile="${TEMP_DIR}/FATAL.err.$$"

  #### FATAL - send alerts and stop:
  if [ -f "$fatalfile" ] ; then

   if [ -f "$warnfile" ] ; then
     echo "ADDITIONAL WARNINGS LOGGED:" >> $fatalfile
     cat $warnfile >> $fatalfile
     rm -f $warnfile
   fi

     do_alert FATAL "*** FATAL: $text (Exited)" $fatalfile

  fi

  #### WARNINGs only, don't stop but send alerts:
  if [ -f "$warnfile" ] ; then

    do_alert WARNING "$text" $warnfile

  fi

}

# Create TEMP_DIR if it doesn't exist:
if [ ! -d $TEMP_DIR ] ; then mkdir -p $TEMP_DIR ; fi

######### WILL NEED TO BE CHANGED TO SUIT YOUR OS:

# Find out what my IP Address is:

# On FreeBSD this is:
# MY_IP=$(/sbin/ifconfig $CAP_INTERFACE | grep "inet " | head -1 | cut -d ' ' -f2)

# On Linux do: (old method)
# MY_IP=$(/sbin/ifconfig $CAP_INTERFACE | grep "inet addr" | awk '{print $3}' | cut -d: -f2)

# Linux new method:
MY_IP=$(/sbin/ip addr list $CAP_INTERFACE | grep "inet " | grep -v secondary | awk '{print $2}' | awk -F'/' '{print $1}')

if [ -z "$MY_IP" ] ; then
# Newer Linux - subtle change to ifconfig:
# New versions output "inet x.x.x.x" not "inet addr x.x.x.x"
MY_IP=$(/sbin/ifconfig $CAP_INTERFACE | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*')
fi

if [ -z "$MY_IP" ] ; then
  MY_IP=$(/bin/hostname -I | awk '{print $1}')
  log_error WARNING "Unable to determine correct IP address for peering LAN interface: $CAP_INTERFACE."
  log_error WARNING "- please check ixp-watch script variable MY_IP"
  log_error WARNING "- Proceeding with $MY_IP for now. (Might be wrong)"
fi

if [ -z "$MY_IP" ] ; then
  do_alert FATAL "Unable to determine IP address"
fi

# On Solaris this is:
# MY_IP=$(/usr/sbin/ifconfig $CAP_INTERFACE | grep "inet " | head -1 | cut -d ' ' -f2)

# Or the even simpler "hostname -i" _might_ return the correct IP :-)

######### WILL NEED TO BE CHANGED TO SUIT YOUR OS:
# Find out what my ethernet address is:
# FreeBSD this is:
# MY_ETHER=$(/sbin/ifconfig $CAP_INTERFACE | grep ether | awk '{print $2}')

# On Solaris this is:
# MY_ETHER=$(/usr/sbin/arp -a | grep " $CAP_INTERFACE" | awk '{print $5}')

# Linux This is: (new output)
MY_ETHER=$(/sbin/ifconfig $CAP_INTERFACE | grep "ether " | awk '{print $2}' | tr [A-Z] [a-z])

if [ -z "$MY_ETHER" ] ; then
  # .. or maybe this: (old output)
  MY_ETHER=$(/sbin/ifconfig $CAP_INTERFACE | grep "HWaddr " | awk '{print $5}' | tr [A-Z] [a-z])
fi

if [ -z "$MY_ETHER" ] ; then
  log_error FATAL "Unable to determine MAC address for peering LAN interface: $CAP_INTERFACE please check ixp-watch script variable MY_ETHER"
fi

if [ ! -d "$SAMPLE_ROOT" ] ; then
   log_error FATAL "Unable to locate directory SAMPLE_ROOT: $SAMPLE_ROOT"
fi


################################################################################
### Sys configuration - things you MIGHT need to tweak. Generally okay.        #
################################################################################
umask 002

YEAR=$(date "+%Y")
MONTH=$(date "+%m")
DAY=$(date "+%d")

SAMPLEDIR=$SAMPLE_ROOT/$YEAR/$MONTH/$DAY
LOGDIR=$LOG_ROOT/$YEAR/$MONTH/$DAY

ISODATE=$YEAR-$MONTH-$DAY

E_DATE=$(date +%s)  # Epoch UNIX date (for RRD graphs updates)
FILEDATE=$(date "+%Y-%m-%d-%H-%M")  # Use as basis for file name. Do not change.
STARTDATE=$(date "+%Y-%m-%d %H:%M") # Date used in reports. Adjust to taste.

REP_EXTN=${REP_EXTN:=TXT}           # Report file extension "TXT" by default.

# You may need to check SAMPLESIZE below in this script, if your ls -la
# output is not the usual format. (Works on debian and other linux okay)

################################################################################
### Main script                                                             ####
################################################################################

# check for any log_errors before proceeding:
check_errors

# Check that state alarms and current directories exist.
# This is for the checking of "new" bad traffic as opposed to
# traffic we've seen before.
# Simple diff between the two dirs generates new alarms spotted.

if [ ! -d $LOG_ROOT/alarms ] ; then mkdir -p $LOG_ROOT/alarms ; fi
if [ ! -d $LOG_ROOT/active ] ; then mkdir -p $LOG_ROOT/active ; fi

# When needed, create various file storage directories.
# Put this in because the single log/sample directory idea
# Wasn't scaling very well - many thousands of files in
# one directory was becoming very tedious to deal with!

# create today's dirs, with some helpful symlinks to make
# it quick to find today's files.

if [ ! -d $LOG_ROOT/$YEAR/$MONTH/$DAY ] ; then
  mkdir -p $LOG_ROOT/$YEAR/$MONTH/$DAY
  rm -f $LOG_ROOT/yesterday # This does *NOT* clobber the files, just the symbolic link
  mv $LOG_ROOT/today $LOG_ROOT/yesterday
  rm -f $LOG_ROOT/today
  ln -s $LOG_ROOT/$YEAR/$MONTH/$DAY $LOG_ROOT/today
fi

if [ ! -d $SAMPLE_ROOT/$YEAR/$MONTH/$DAY ] ; then
  mkdir -p $SAMPLE_ROOT/$YEAR/$MONTH/$DAY
  rm -f $SAMPLE_ROOT/yesterday
  mv $SAMPLE_ROOT/today $SAMPLE_ROOT/yesterday
  rm -f $SAMPLE_ROOT/today
  ln -s $SAMPLE_ROOT/$YEAR/$MONTH/$DAY $SAMPLE_ROOT/today
fi

# If disk space is low, then try to delete some old sample files:
if [ -n "${DISK_PERCENT_PROG:+1}" ]; then

  DISK_PERCENT=$($DISK_PERCENT_PROG | tail -n+2 | sed s/[\ \%]//g)

  if [ $DISK_PERCENT -ge $DISK_PERCENT_MAX ] ; then
	  # Delete samples > 6h old bigger than MAX_SAMPLE_SIZE
 	  deleted_samples=$(find $SAMPLE_ROOT -size +$MAX_SAMPLE_SIZE -cmin +360)
    log_error WARNING "Disk space low! Deleted samples"
    log_error WARNING "$deleted_samples"
	  find $SAMPLE_ROOT -size +$MAX_SAMPLE_SIZE -cmin +360 -exec rm {} \;
  fi

 # See if that was enough, if not, delete more agressively:
 DISK_PERCENT=$($DISK_PERCENT_PROG | tail -n+2 | sed s/[\ \%]//g)

  if [ $DISK_PERCENT -ge $DISK_PERCENT_MAX ] ; then
    # Delete samples > 1h old bigger than 20M:
    deleted_samples=$(find $SAMPLE_ROOT -size +20M -cmin +60)
    log_error WARNING "Disk space still low! Deleted samples"
    log_error WARNING "$deleted_samples"
    find $SAMPLE_ROOT -size +20M -cmin +60 -exec rm {} \;
  fi

 check_errors

fi

# Start sample capture

# Older versions of tshark:
# $TSHARK -q -i $CAP_INTERFACE -a duration:$SAMPLE_TIME -w $SAMPLEDIR/$FILEDATE not host $MY_IP

if [ ! -x "$TSHARK" ] ; then
   do_alert FATAL "Cannot execute: $TSHARK"
fi

# Newer versions of tshark require -f "<capture_filter>"
$TSHARK -q -i $CAP_INTERFACE -a duration:$SAMPLE_TIME -w $SAMPLEDIR/$FILEDATE -f "not host $MY_IP" 2>${TEMP_DIR}/tshark_output.$$
if [ $? != 0 ] ; then
  errors=$(cat ${TEMP_DIR}/tshark_output.$$)
  log_error FATAL "TSHARK cmd: $TSHARK -q -i $CAP_INTERFACE -a duration:$SAMPLE_TIME -w $SAMPLEDIR/$FILEDATE -f not host $MY_IP"
  log_error FATAL "TSHARK returned: $?"
  log_error FATAL "$errors"
  check_errors FATAL "Sample capture returned error(s): $TSHARK"
fi

STOPDATE=$(date "+%Y-%m-%d %H:%M")

if [ ! -f $SAMPLEDIR/$FILEDATE ] ; then
 do_alert FATAL "Error: sample file $SAMPLEDIR/$FILEDATE could not be opened."
fi

SAMPLESIZE=$(ls -la $SAMPLEDIR/$FILEDATE | awk '{print $5}')

# Do not process really big sample files (usually flooding)
# also if the sample file is stupidly big, delete it, as it's unlikely
# we will be able to process it sensibly.
if [ $SAMPLESIZE -ge $MAX_SAMPLE_SIZE ] ; then

 log_error FATAL "Error: sample file $SAMPLEDIR/$FILEDATE too big to process."
 log_error FATAL "- $SAMPLESIZE bigger than MAX_SAMPLE_SIZE $MAX_SAMPLE_SIZE"
 log_error FATAL "- The sample file will NOT be processed by ixp-watch."
 log_error FATAL "- "
 log_error FATAL "- This may be caused by a member port going down, or as a result of other trouble."
 log_error FATAL "- If this error persists, you should run some sniffs on the network to find out"
 log_error FATAL "- what the source of the traffic spew is."

  if [ $SAMPLESIZE -ge $ENORMOUS_SAMPLE ] ; then
    dirlist=$(ls -lah $SAMPLEDIR/$FILEDATE)
    rm -f $SAMPLEDIR/$FILEDATE
    log_error FATAL "- "
    log_error FATAL "Also, the file was considered ENORMOUS so I deleted it."
    log_error FATAL "$dirlist"
    log_error FATAL "- "
  fi

  if [ -f $SAMPLEDIR/$FILEDATE ] ; then
   $GZIP -9 $SAMPLEDIR/$FILEDATE &
  fi

 check_errors "Garbage or flooded traffic detected"

 # check_errors will call die if FATAL errors logged.
 # exit 1

fi

# Dump arps to text file from sample.
# (This takes a while because we have to DNS resolve them all.)
$TSHARK -n -N m -r $SAMPLEDIR/$FILEDATE -Y arp > $TEMP_DIR/arps.$$

# Not arp and not IP (picks up CDP, etc.)
EXPRESSION="not arp and not ip and not ipv6 and not gre and not l2tp"
$TSHARK -n -N m -r $SAMPLEDIR/$FILEDATE -Y "$EXPRESSION" > $TEMP_DIR/notip.$$

# ICMP
$TSHARK -n -r $SAMPLEDIR/$FILEDATE -Y icmp > $TEMP_DIR/icmp.$$

# ICMPv6
$TSHARK -n -r $SAMPLEDIR/$FILEDATE -Y icmpv6 > $TEMP_DIR/icmp6.$$

# IP
$TSHARK -r $SAMPLEDIR/$FILEDATE -Y "ip and not icmp and not arp and not gre and not l2tp" > $TEMP_DIR/ip.$$

# IP6
$TSHARK -r $SAMPLEDIR/$FILEDATE -Y ipv6 > $TEMP_DIR/ip6.$$

# SNMP - this is quite fun. ;-)
$TSHARK -r $SAMPLEDIR/$FILEDATE -Y "snmp and not gre and not l2tp" | awk '{print $3" "$6" "$7 " -"$5}' | sort | uniq -c > $LOG_ROOT/SNMP.LOG

# BGP - Members trying to open BGP to one of our sponged
# addresses will show up here:
if [ $BGPOPENS_OLD_FORMAT = "1" ] ; then
 $TSHARK -n -Y "tcp.flags.syn==1 and tcp.dstport==179 and not icmp" -r $SAMPLEDIR/$FILEDATE | awk '{print $3" -> " $5}' | sort -t\.    -k4n | uniq > $LOG_ROOT/BGPOPENS.LOG
else
 $TSHARK -NnN -T fields -e ip.src -e ip.src_host -e eth.src -e ip.dst -Y "not ipv6 and tcp.flags.syn==1 and tcp.dstport==179 and not icmp" -r $SAMPLEDIR/$FILEDATE | sort -t \. -k3.1,3.3n -k4n | uniq > $LOG_ROOT/BGPOPENS.LOG
fi

# Non-unicast traffic:
# Multicasts and things directed to 255.255.255.255 (IGP/OSPF/Generally bad things)
$TSHARK -n -r $SAMPLEDIR/$FILEDATE -Y "ip.dst >= 224.0.0.0 and not gre and not l2tp" | awk '{print $3" "$4" "$5" "$6" "$7" "$8" "$10" "$11}' | sort -n | uniq -c > $LOG_ROOT/NON_UNICAST.LOG

# Generate summary of ICMPv6 types:
$TSHARK -T fields -e icmpv6.type -r $SAMPLEDIR/$FILEDATE -Y icmpv6.type | sort | uniq -c | awk '{print $2":"$1}' > $TEMP_DIR/icmpv6types.$$

# Generate report of IPV6 Router Advertisements:
$TSHARK -T fields -e ipv6.src -e eth.src_resolved -r $SAMPLEDIR/$FILEDATE -Y "icmpv6.type == 134" | sort | uniq -c | sort -rn > $LOG_ROOT/IPV6_RA.LOG

# Right. We've got all the samples we want in text files,
# Now to summarise the packets samples into reports.

# Take the output from the not ip and munge it to report:
cat $TEMP_DIR/notip.$$ | awk '{print $3" -> "$5" "$6" "$7" "$8" "$9" "$10" "$11" "$12}' | sort | uniq -c | sort -rn > $LOG_ROOT/NOT_IP.LOG

# Create alarms for bad traffic:
cd $LOG_ROOT/active/

# Non IP Traffic (CDP etc.)
cat $LOG_ROOT/NOT_IP.LOG | sed 's/[^a-zA-Z0-9\ \:\>\-]/_/g' | grep -v "STP " | awk '{print "echo \"Alarm for "$__"\" >"$2"__"$4}' | sh

# Non IP Unicast (OSPF and other IGPs and baddies.)
cat $LOG_ROOT/NON_UNICAST.LOG | awk '{print "echo \"Alarm for "$__"\">"$2"__"$4}' | sh

# IPv6 RA
cat $LOG_ROOT/IPV6_RA.LOG | sed 's/[^a-zA-Z0-9\t\ \:\>\-]/_/g' | awk '{print "echo \"Alarm for IPv6 RA "$__"\" >"$3".ipv6_ra"}' | sh

# Any SNMP we can report?
NUM_SNMP=0

if [ -f $LOG_ROOT/SNMP.LOG ] ; then
 NUM_SNMP=$(grep -ci "SNMP " $LOG_ROOT/SNMP.LOG)
fi


if [ "$NUM_SNMP" = "0" ] ; then
 # oh shame. No community strings this time round. ;-)
 rm $LOG_ROOT/SNMP.LOG
fi


if [ "$SPANNING_TREE_BAD" = "1" ] ; then

# Spanning Tree (specific checking because we consider it very very naughty!)
   NUM_STP=$(grep -ci "STP " $LOG_ROOT/NOT_IP.LOG)

   if [ ! "$NUM_STP" = "0" ] ; then

    # Generate alarms for STP traffic only:
    grep -i "STP " $LOG_ROOT/NOT_IP.LOG | awk '{print "echo \""$2"\" > "$2"_STP"}' | sh

     for i in $( ls *_STP ); do
        if [ ! -f $LOG_ROOT/alarms/$i ] ; then
        cat $i >> $TEMP_DIR/alarms.tmp
        cat $i >> $TEMP_DIR/alarms_stp.tmp
        cp $i $LOG_ROOT/alarms/
        fi
     done

   else

      if [ -f *_STP ] ; then
       rm -f *_STP
       rm -f $LOG_ROOT/alarms/*_STP
       do_alert GOOD "Spanning tree alarm cleared"
      fi

   fi

fi

# Clear old active:
find $LOG_ROOT/active/ -type f -ctime +7 -exec rm {} \;

# Remove alarm states for traffic no longer active:
for file in ${LOG_ROOT}/alarms/* ; do
   if [ ! -f "${LOG_ROOT}/active/${file##*/}" ] ; then
     rm -f ${file}
   fi
done

# Log new alarms, create state for things we just 
# alerted about, so we don't alert again:
for file in ${LOG_ROOT}/active/* ; do
   if [ ! -f "${LOG_ROOT}/alarms/${file##*/}" ] ; then
     cat ${file} >> $TEMP_DIR/alarms.tmp
     cp ${file} $LOG_ROOT/alarms/
   fi
done

# Take the ICMP output and munge it to report:
#
# Old version of tshark:
# grep -vw "$MY_IP" $TEMP_DIR/icmp.$$ | awk '{print $3" "$4" "$5" "$6" "$7" "$8" "$10" "$11}' | sort | uniq -c | sort -rn > $LOG_ROOT/ICMP.LOG
#
# New version of tshark:
grep -vw "$MY_IP" $TEMP_DIR/icmp.$$ | awk '{print $3" "$4" "$5" "$6" "$7" "$8" "$10}' | sort | uniq -c | sort -rn > $LOG_ROOT/ICMP.LOG

# Find arp responses that are not for me, that I'm responding to,
# so they must be sponged addresses.

cat $TEMP_DIR/arps.$$ | grep -vw $MY_IP | grep "is at $MY_ETHER" | awk '{print $5" arping for sponged address "$8}' | sort | uniq -c | sort -rn > $LOG_ROOT/ARPSPONGE.LOG

# Find the top arpers:
# ARP Output has changed for some reason they've bunged an extra word in there: (2013-12)
# grep "Who has" $TEMP_DIR/arps.$$ | awk '{print $11" ("$3") arping for "substr($9,1,length($9)-1)}' | sort | uniq -c | sort -rn | head -30 > $LOG_ROOT/TOP_ARPERS.LOG
grep "Who has" $TEMP_DIR/arps.$$ | awk '{print $12" ("$3") arping for "substr($10,1,length($10)-1)}' | sort | uniq -c | sort -rn | head -30 > $LOG_ROOT/TOP_ARPERS.LOG

# Find the top arps requested:
grep "Who has" $TEMP_DIR/arps.$$ | awk '{print "xxx arping for " substr($10,1,length($10)-1)}' | sort | uniq -c | sort -rn | head -30 > $LOG_ROOT/TOP_ARPREQ.LOG

# Get some counts of things
NUM_ARP=$(grep -c "Who has" $TEMP_DIR/arps.$$)
NUM_SPONGE_REPLY=$(grep -c "is at $MY_ETHER" $TEMP_DIR/arps.$$)
NUM_NOTIP=$(wc -l $TEMP_DIR/notip.$$ |  awk '{print $1}')
NUM_ICMP=$(wc -l $TEMP_DIR/icmp.$$ |  awk '{print $1}')
NUM_IP=$(wc -l $TEMP_DIR/ip.$$ |  awk '{print $1}')
NUM_IP6=$(wc -l $TEMP_DIR/ip6.$$ |  awk '{print $1}')
NUM_ICMP6=$(wc -l $TEMP_DIR/icmp6.$$ |  awk '{print $1}')
NUM_BGP=$(wc -l $LOG_ROOT/BGPOPENS.LOG | awk '{print $1}')

# Breakdown of ICMP types:
NUM_ICMP6_128=$(cat $TEMP_DIR/icmpv6types.$$ | grep "^128" | cut -d: -f2)
NUM_ICMP6_129=$(cat $TEMP_DIR/icmpv6types.$$ | grep "^129" | cut -d: -f2)
NUM_ICMP6_130=$(cat $TEMP_DIR/icmpv6types.$$ | grep "^130" | cut -d: -f2)
NUM_ICMP6_131=$(cat $TEMP_DIR/icmpv6types.$$ | grep "^131" | cut -d: -f2)
NUM_ICMP6_132=$(cat $TEMP_DIR/icmpv6types.$$ | grep "^132" | cut -d: -f2)
NUM_ICMP6_133=$(cat $TEMP_DIR/icmpv6types.$$ | grep "^133" | cut -d: -f2)
NUM_ICMP6_134=$(cat $TEMP_DIR/icmpv6types.$$ | grep "^134" | cut -d: -f2)
NUM_ICMP6_135=$(cat $TEMP_DIR/icmpv6types.$$ | grep "^135" | cut -d: -f2)
NUM_ICMP6_135=$(cat $TEMP_DIR/icmpv6types.$$ | grep "^135" | cut -d: -f2)
NUM_ICMP6_136=$(cat $TEMP_DIR/icmpv6types.$$ | grep "^136" | cut -d: -f2)
NUM_ICMP6_137=$(cat $TEMP_DIR/icmpv6types.$$ | grep "^137" | cut -d: -f2)
NUM_ICMP6_143=$(cat $TEMP_DIR/icmpv6types.$$ | grep "^143" | cut -d: -f2)

# Calculate numbers per minute:
NUM_MINUTES=$(( $SAMPLE_TIME / 60 ))
NUM_ARPS_MIN=$(( $NUM_ARP / $NUM_MINUTES ))
NUM_NOTIP_MIN=$(( $NUM_NOTIP / $NUM_MINUTES ))
NUM_ICMP_MIN=$(( $NUM_ICMP / $NUM_MINUTES ))
NUM_ICMP6_MIN=$(( $NUM_ICMP6 / $NUM_MINUTES ))
NUM_SPONGE_REPLY_MIN=$(( $NUM_SPONGE_REPLY / $NUM_MINUTES ))
NUM_BGP_MIN=$(( $NUM_BGP / $NUM_MINUTES ))


function _head()
{
  local text=$1
  local line=$(printf "%0.s-" {1..80})
  printf '%s\n%s\n%s\n' "$line" ":::::: $text" "$line"
}


function report_header()
{
  local text=$1
  local header=$(_head "$text")
  echo "$header">> $REPORT_FILE
}


function report()
{
  local text=$1
  local line=$(printf "%0.s-" {1..80})
  local file=$2

  if [ "$text" = "_LINE_" ] ; then
   local text=$line
  fi

  echo "$text">> $REPORT_FILE

}

function report_section_file()
{

  local title=$1
  local file=$2

  local header=$(_head "$title")
  echo "$header">> $REPORT_FILE
  cat $file>> $REPORT_FILE

}

function create_report()
{
  local file=$1
  local title=$2
  REPORT_FILE=$file

  local header=$(_head "$title")
  echo "$header"> $REPORT_FILE
}


# Create report
create_report $LOGDIR/$FILEDATE.$REP_EXTN "$NETWORK LAN Traffic Summary Report - $ISODATE"
report "Analysis based on a sample of $NUM_MINUTES minutes."
report "Started at $STARTDATE, ended at $STOPDATE"
report "The entire session is saved in:  $SAMPLEDIR/$FILEDATE.gz"
report _LINE_
report "ARP Queries......: $NUM_ARP"
report "ARPs per minute..: $NUM_ARPS_MIN"
report "IP Packets.......: $NUM_IP"
report "IP6 Packets......: $NUM_IP6"
report "ICMP Packets.....: $NUM_ICMP"
report "ICMPv6 Packets...: $NUM_ICMP6"
report "NON-IP Packets...: $NUM_NOTIP"
report "ARPs Sponged.....: $NUM_SPONGE_REPLY"
report "Dead BGP Peers...: $NUM_BGP"

report_header "ICMPv6 TYPE SUMMARY"

  if [ -n "$NUM_ICMP6_128" ] ; then report "ICMPv6 128 Echo Request...........................: $NUM_ICMP6_128" ; fi
  if [ -n "$NUM_ICMP6_129" ] ; then report "ICMPv6 129 Echo Reply.............................: $NUM_ICMP6_129" ; fi
  if [ -n "$NUM_ICMP6_130" ] ; then report "ICMPv6 130 Multicast Listener Query...............: $NUM_ICMP6_130" ; fi
  if [ -n "$NUM_ICMP6_131" ] ; then report "ICMPv6 131 Multicast Listener Report..............: $NUM_ICMP6_131" ; fi
  if [ -n "$NUM_ICMP6_132" ] ; then report "ICMPv6 132 Multicast Listener Done................: $NUM_ICMP6_132" ; fi
  if [ -n "$NUM_ICMP6_133" ] ; then report "ICMPv6 133 Router Solicitation (NDP)..............: $NUM_ICMP6_133" ; fi
  if [ -n "$NUM_ICMP6_134" ] ; then report "ICMPv6 134 Router Advertisement (NDP).............: $NUM_ICMP6_134" ; fi
  if [ -n "$NUM_ICMP6_135" ] ; then report "ICMPv6 135 Neighbor Solicitation (NDP)............: $NUM_ICMP6_135" ; fi
  if [ -n "$NUM_ICMP6_136" ] ; then report "ICMPv6 136 Neighbor Advertisement (NDP)...........: $NUM_ICMP6_136" ; fi
  if [ -n "$NUM_ICMP6_137" ] ; then report "ICMPv6 137 Redirect Message (NDP).................: $NUM_ICMP6_137" ; fi
  if [ -n "$NUM_ICMP6_143" ] ; then report "ICMPv6 143 Multicast Listener Discovery (MLDv2)...: $NUM_ICMP6_143" ; fi

report_section_file "TOP 30 ARPERS" $LOG_ROOT/TOP_ARPERS.LOG
report_section_file "TOP 30 ARPs Requested" $LOG_ROOT/TOP_ARPREQ.LOG
report_section_file "BGP OPEN ATTEMPTS FOR RECLAIMED/DEAD IP ADDRESSES" $LOG_ROOT/BGPOPENS.LOG

if [ -f $LOG_ROOT/SNMP.LOG ] ; then
  report_section_file "MARTIAN/ODD SNMP" $LOG_ROOT/SNMP.LOG
fi

report_section_file "SPONGE ARP REPLY ACTIVITY" $LOG_ROOT/ARPSPONGE.LOG
report_section_file "NON IP TRAFFIC" $LOG_ROOT/NOT_IP.LOG
report_section_file "NON UNICAST IP TRAFFIC" $LOG_ROOT/NON_UNICAST.LOG
report_section_file "ICMP MESSAGES" $LOG_ROOT/ICMP.LOG

if [ -f $LOG_ROOT/IPV6_RA.LOG ] ; then
 report_section_file "IPv6 ROUTER ADVERTISEMENTS" $LOG_ROOT/IPV6_RA.LOG
fi

if [ -f $TEMP_DIR/alarms.tmp ] ; then
  # Some new alarms have happened! Mail out the new alarms.
  # (and append to this report)
  report_section_file "NEW ALARMS SINCE LAST RUN:" $TEMP_DIR/alarms.tmp
  do_alert WARNING "Non-IP Traffic Report ($FILEDATE)" $TEMP_DIR/alarms.tmp
fi

# Copy reports to HTML location if defined:

if [ -n "$HTML_DIR" ] ; then

   if [ ! -d $HTML_DIR ] ; then mkdir -p $HTML_DIR ; fi

		if [ -f "$HTML_DIR/report_4.html" ] ; then rm -f $HTML_DIR/report_4.html ; fi
		if [ -f "$HTML_DIR/report_3.html" ] ; then mv $HTML_DIR/report_3.html $HTML_DIR/report_4.html ; fi
		if [ -f "$HTML_DIR/report_2.html" ] ; then mv $HTML_DIR/report_2.html $HTML_DIR/report_3.html ; fi
	  if [ -f "$HTML_DIR/report_1.html" ] ; then mv $HTML_DIR/report_1.html $HTML_DIR/report_2.html ; fi

		cp $LOGDIR/$FILEDATE.$REP_EXTN $HTML_DIR/report_1.html

fi


function do_graph()
{

  local rrd=$1
  local val=$2
  local title=$3

  if [ ! -f "$RRD_DIR/${rrd}.rrd" ]  ; then $RRDTOOL create $RRD_DIR/${rrd}.rrd --step=$SAMPLE_TIME DS:${rrd}:GAUGE:1800:U:U RRA:AVERAGE:0.5:1:96 ; fi

  $RRDTOOL update $RRD_DIR/${rrd}.rrd $E_DATE:${val}
  $RRDTOOL graph $GRAPH_DIR/${rrd}.png --vertical-label "$title" DEF:${rrd}=${RRD_DIR}/${rrd}.rrd:${rrd}:AVERAGE AREA:"${rrd}#99CCFF" > /dev/null

}

# Update RRD files

if [ $DO_RRD = "1" ] ; then

 if [ ! -d $RRD_DIR ]   ; then mkdir -p $RRD_DIR ; fi
 if [ ! -d $GRAPH_DIR ] ; then mkdir -p $GRAPH_DIR ; fi

 declare -A graphtitle
 declare -A graphvalue

 graphtitle[arp]="arp/min"           ; graphvalue[arp]=$NUM_ARPS_MIN
 graphtitle[non-ip]="non-ip/min"     ; graphvalue[non-ip]=$NUM_NOTIP_MIN
 graphtitle[icmp]="ICMP/min"         ; graphvalue[icmp]=$NUM_ICMP_MIN
 graphtitle[icmp6]="ICMPv6/min"      ; graphvalue[icmp6]=$NUM_ICMP6_MIN
 graphtitle[sponge]="ARPSponge/min"  ; graphvalue[sponge]=$NUM_SPONGE_REPLY_MIN
 graphtitle[deadbgp]="DeadBGP/min"   ; graphvalue[deadbgp]=$NUM_BGP_MIN

 for graph in "${!graphtitle[@]}"; do
  do_graph $graph "${graphvalue[$graph]}" "${graphtitle[$graph]}"
 done

fi

if [ -f $TEMP_DIR/alarms_stp.tmp ] ; then

 $TSHARK -n -r $SAMPLEDIR/$FILEDATE -Y stp >> $TEMP_DIR/alarms_stp.tmp
 do_alert CRITICAL "Spanning Tree Alarm - Please investigate" $TEMP_DIR/alarms_stp.tmp

fi

### Excess ARP detection:

if [ $NUM_ARPS_MIN -ge $ARP_WARNLEVEL ] ; then

echo "ARPS Per min is $NUM_ARPS_MIN" > $LOG_ROOT/alarms_arp.tmp

  if [ ! -f $LOG_ROOT/arpstorm.warn ] ; then
   
   do_alert CRITICAL "High number of ARPS in progress - Please investigate" $LOG_ROOT/alarms_arp.tmp $LOGDIR/$FILEDATE.$REP_EXTN
   touch $LOG_ROOT/arpstorm.warn

  fi

else

 # ARP level normal. Remove arp storm detection files if they exist.

  if [ -f $LOG_ROOT/arpstorm.warn ] ; then 
    do_alert GOOD "ARP level within normal range - $NUM_ARPS_MIN arps/min"
    rm -f $LOG_ROOT/arpstorm.warn 
  fi

fi

# Write metrics to file if we want this:

if [ "$WRITE_COUNTS" = "1" ] ; then

 ### This is how we get the metrics into hostmon to plot graphs and hook
 ### ixp-watch to our monitoring/alerting system.
 ### You could also hack this to pass stats to a SNMPD, Nagios agent, or 
 ### use for generating RRD/mrtg graphs.
 ### Note: not all fields from the report are in here, but you get the idea.
 ### Fields are: <Description> <Value> <Units> <Network>

 echo "ArpPacketCount $NUM_ARP packets $NETWORK" > $COUNTSFILE
 echo "ArpsPerMin $NUM_ARPS_MIN packets $NETWORK" >> $COUNTSFILE
 echo "NonIPPackets $NUM_NOTIP packets $NETWORK"  >> $COUNTSFILE
 echo "DeadBGP $NUM_BGP count $NETWORK"  >> $COUNTSFILE
 echo "ArpSpongeReply $NUM_SPONGE_REPLY count $NETWORK"  >> $COUNTSFILE
 echo "NonIPPackets $NUM_NOTIP packets $NETWORK"  >> $COUNTSFILE
 echo "ICMPpackets $NUM_ICMP packets $NETWORK"  >> $COUNTSFILE
 echo "NumSTP $NUM_STP packets $NETWORK" >> $COUNTSFILE
 echo "ICMP6packets $NUM_ICMP6 packets $NETWORK" >> $COUNTSFILE

fi

# If you want to send full reports to e-mail:

if [ -n "$REPORT_EMAIL" ] ; then
 $MAILPROG -s "[$NETWORK] Traffic Summary Report" $REPORT_EMAIL< $LOGDIR/$FILEDATE.$REP_EXTN
fi

# Clean up
cleanup

umask 002
# Gzip the sample files. Tshark can read .gz files directly.
if [ -f $SAMPLEDIR/$FILEDATE ] ; then 
   $GZIP -9 $SAMPLEDIR/$FILEDATE & 
fi

if ls $SAMPLEDIR/*.gz 1> /dev/null 2>&1; then
    chmod 664 $SAMPLEDIR/*.gz
fi
