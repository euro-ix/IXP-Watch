#!/bin/bash
# ixp-watch version: 1.14
# This file is part of IXP Watch
#
# IXP Watch is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, version v2.0 of the License.
#
# IXP Watch is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License v2.0
# along with IXP Watch If not, see:
#
# http://www.gnu.org/licenses/gpl-2.0.html

################################################################################
#### Local configuration. Things you WILL need to check                        #
################################################################################

# Where is config vars file:
CONFIG=/usr/local/ixpwatch/config.sh

# Config file can also be specified from the command line with -c <filename>:
optstring=":c:"

while getopts ${optstring} arg; do
  case "${arg}" in
    c)
            # Set config file:
            CONFIG=${OPTARG}
    ;;
  esac
done


if [ ! -f $CONFIG ] ; then
 echo "Could not open config file $CONFIG!"
 exit 1
fi

source $CONFIG

# Create TEMP_DIR if it doesn't exist:
if [ ! -d $TEMP_DIR ] ; then mkdir -p $TEMP_DIR ; fi

######### WILL NEED TO BE CHANGED TO SUIT YOUR OS:

# Find out what my IP Address is:

# On FreeBSD this is:
# MY_IP=`/sbin/ifconfig $CAP_INTERFACE | grep "inet " | head -1 | cut -d ' ' -f2`

# On Linux do: (old method)
# MY_IP=`/sbin/ifconfig $CAP_INTERFACE | grep "inet addr" | awk '{print $3}' | cut -d: -f2`

# Linux new method:
MY_IP=`/sbin/ip addr list $CAP_INTERFACE | grep "inet " | grep -v secondary | awk '{print $2}' | awk -F'/' '{print $1}'`

if [ -z "$MY_IP" ] ; then
# Newer Linux - subtle change to ifconfig:
# New versions output "inet x.x.x.x" not "inet addr x.x.x.x"
MY_IP=`/sbin/ifconfig $CAP_INTERFACE | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*'`
fi

if [ -z "$MY_IP" ] ; then
  echo "WARNING: Unable to determine correct IP address for peering LAN interface: $CAP_INTERFACE." >> $TEMP_DIR/err.$$
  echo "please check ixp-watch script variable MY_IP" >> $TEMP_DIR/err.$$
  MY_IP=`/bin/hostname -I | awk '{print $1}'` >> $TEMP_DIR/err.$$
  echo "Proceeding with $MY_IP for now. (Might be wrong)" >> $TEMP_DIR/err.$$
fi

if [ -z "$MY_IP" ] ; then
  echo "WHOOPS: Unable to determine any IP address. Exiting." >> $TEMP_DIR/err.$$
  WHOOPS=1
fi

# On Solaris this is:
# MY_IP=`/usr/sbin/ifconfig $CAP_INTERFACE | grep "inet " | head -1 | cut -d ' ' -f2`

# Or the even simpler "hostname -i" _might_ return the correct IP :-)

######### WILL NEED TO BE CHANGED TO SUIT YOUR OS:
# Find out what my ethernet address is:
# FreeBSD this is:
# MY_ETHER=`/sbin/ifconfig $CAP_INTERFACE | grep ether | awk '{print $2}'`

# On Solaris this is:
# MY_ETHER=`/usr/sbin/arp -a | grep " $CAP_INTERFACE" | awk '{print $5}'`

# Linux This is: (new output)
MY_ETHER=`/sbin/ifconfig $CAP_INTERFACE | grep "ether " | awk '{print $2}' | tr [A-Z] [a-z]`

if [ -z "$MY_ETHER" ] ; then
  # .. or maybe this: (old output)
  MY_ETHER=`/sbin/ifconfig $CAP_INTERFACE | grep "HWaddr " | awk '{print $5}' | tr [A-Z] [a-z]`
fi

if [ -z "$MY_ETHER" ] ; then
  echo "WARNING: Unable to determine MAC address for peering LAN interface: $CAP_INTERFACE." >> $TEMP_DIR/err.$$
  echo "please check ixp-watch script variable MY_ETHER" >> $TEMP_DIR/err.$$
  WHOOPS=1
fi

if [ ! -d "$SAMPLE_ROOT" ] ; then
   echo "WHOOPS: Unable to locate directory: $SAMPLE_ROOT" >> $TEMP_DIR/err.$$
   WHOOPS=1
fi


################################################################################
### Sys configuration - things you MIGHT need to tweak. Generally okay.        #
################################################################################
umask 002

YEAR=`date "+%Y"`
MONTH=`date "+%m"`
DAY=`date "+%d"`

SAMPLEDIR=$SAMPLE_ROOT/$YEAR/$MONTH/$DAY
LOGDIR=$LOG_ROOT/$YEAR/$MONTH/$DAY

ISODATE=$YEAR-$MONTH-$DAY

E_DATE=`date +%s`  # Epoch UNIX date (for RRD graphs updates)
FILEDATE=`date "+%Y-%m-%d-%H-%M"`  # Use as basis for file name. Do not change.
STARTDATE=`date "+%Y-%m-%d %H:%M"` # Date used in reports. Adjust to taste.

LOGFILE=$TEMP_DIR/ixp-watch.log

# Where to write stats counts to, (if enabled)
# If you use my format, make sure what you've got in $NETWORK won't break
# the filename (no "/ | or nasty chars or spaces etc.)
# You don't _have_ to use this filename though :-)

COUNTSFILE=$TEMP_DIR/ixp-watch.$NETWORK.counts

# You may need to check SAMPLESIZE below in this script, if your ls -la
# output is not the usual format. (Works on debian and other linux okay)

if [ -f "$TEMP_DIR/err.$$" ] ; then
  $MAILPROG -s "[$NETWORK] ixp-watch script error" $ALARM_EMAIL < $TEMP_DIR/err.$$
fi


if [ -n "$WHOOPS" ] ; then
        echo "*** Script error occurred. Exiting!"
        cat $TEMP_DIR/err.$$
        rm -f $TEMP_DIR/err.$$
        exit 2
fi

if [ -f "$TEMP_DIR/err.$$" ] ; then
           rm -f $TEMP_DIR/err.$$
fi

################################################################################
### Main script                                                             ####
################################################################################

# Check that state alarms and current directories exist.
# This is for the checking of "new" bad traffic as opposed to
# traffic we've seen before.
# Simple diff between the two dirs generates new alarms spotted.

if [ ! -d $LOG_ROOT/alarms ] ; then mkdir -p $LOG_ROOT/alarms ; fi
if [ ! -d $LOG_ROOT/active ] ; then mkdir -p $LOG_ROOT/active ; fi

# When needed, create various file storage directories.
# Put this in because the single log/sample directory idea
# Wasn't scaling very well - many thousands of files in
# one directory was becoming very tedious to deal with!

# create today's dirs, with some helpful symlinks to make
# it quick to find todays files.

if [ ! -d $LOG_ROOT/$YEAR/$MONTH/$DAY ] ; then
  mkdir -p $LOG_ROOT/$YEAR/$MONTH/$DAY
  rm -f $LOG_ROOT/yesterday # This does *NOT* clobber the files, just the symbolic link
  mv $LOG_ROOT/today $LOG_ROOT/yesterday
  rm -f $LOG_ROOT/today
  ln -s $LOG_ROOT/$YEAR/$MONTH/$DAY $LOG_ROOT/today
fi

if [ ! -d $SAMPLE_ROOT/$YEAR/$MONTH/$DAY ] ; then
  mkdir -p $SAMPLE_ROOT/$YEAR/$MONTH/$DAY
  rm -f $SAMPLE_ROOT/yesterday
  mv $SAMPLE_ROOT/today $SAMPLE_ROOT/yesterday
  rm -f $SAMPLE_ROOT/today
  ln -s $SAMPLE_ROOT/$YEAR/$MONTH/$DAY $SAMPLE_ROOT/today
fi

# If disk space is low, then try to delete some old sample files:
if [ -n "${DISK_PERCENT_PROG:+1}" ]; then

  DISK_PERCENT=`$DISK_PERCENT_PROG | tail -n+2 | sed s/[\ \%]//g`

  if [ $DISK_PERCENT -ge $DISK_PERCENT_MAX ] ; then
	  # Delete samples > 6h old bigger than MAX_SAMPLE_SIZE
    echo "WARNING: Disk space low! Deleted samples: " >> $TEMP_DIR/err.$$
	  find $SAMPLE_ROOT -size +$MAX_SAMPLE_SIZE -cmin +360 >> $TEMP_DIR/err.$$
	  find $SAMPLE_ROOT -size +$MAX_SAMPLE_SIZE -cmin +360 -exec rm {} \;
  fi

 # See if that was enough, if not, delete more agressively:
 DISK_PERCENT=`$DISK_PERCENT_PROG | tail -n+2 | sed s/[\ \%]//g`

  if [ $DISK_PERCENT -ge $DISK_PERCENT_MAX ] ; then
    # Delete samples > 1h old bigger than 20M:
    echo "" >> $TEMP_DIR/err.$$
    echo "WARNING: Disk space still low! Deleted samples: " >> $TEMP_DIR/err.$$
    find $SAMPLE_ROOT -size +20M -cmin +60 >> $TEMP_DIR/err.$$
    find $SAMPLE_ROOT -size +20M -cmin +60 -exec rm {} \;
  fi

  if [ -f "$TEMP_DIR/err.$$" ] ; then
     $MAILPROG -s "[$NETWORK] Warning: disk space low - samples may be deleted" $ALARM_EMAIL < $TEMP_DIR/err.$$
     rm $TEMP_DIR/err.$$
  fi

fi

# Start sample capture

# Older versions of tshark:
# $TSHARK -q -i $CAP_INTERFACE -a duration:$SAMPLE_TIME -w $SAMPLEDIR/$FILEDATE not host $MY_IP

# Newer versions of tshark require -f "<capture_filter>"
$TSHARK -q -i $CAP_INTERFACE -a duration:$SAMPLE_TIME -w $SAMPLEDIR/$FILEDATE -f "not host $MY_IP"


STOPDATE=`date "+%Y-%m-%d %H:%M"`

if [ ! -f $SAMPLEDIR/$FILEDATE ] ; then
 echo "Error: sample file $SAMPLEDIR/$FILEDATE could not be opened."
 echo "$STARTDATE: Error: sample file $SAMPLEDIR/$FILEDATE could not be opened." >> $LOGFILE
 exit 1
fi

SAMPLESIZE=`ls -la $SAMPLEDIR/$FILEDATE | awk '{print $5}'`

# Do not process really big sample files (usually flooding)
# also if the sample file is stupidly big, delete it, as it's unlikely
# we will be able to process it sensibly.
if [ $SAMPLESIZE -ge $MAX_SAMPLE_SIZE ] ; then

 echo "Error: sample file $SAMPLEDIR/$FILEDATE too big to process." > $TEMP_DIR/err.$$
 echo "$SAMPLESIZE bigger than MAX_SAMPLE_SIZE $MAX_SAMPLE_SIZE" >> $TEMP_DIR/err.$$
 echo "The sample file will NOT be processed by ixp-watch." >> $TEMP_DIR/err.$$
 echo "" >> $TEMP_DIR/err.$$
 echo "This may be caused by a member port going down, or as a result of other trouble." >> $TEMP_DIR/err.$$
 echo "If this error persists, you should run some sniffs on the network to find out" >> $TEMP_DIR/err.$$
 echo "what the source of the traffic spew is." >> $TEMP_DIR/err.$$

  if [ $SAMPLESIZE -ge $ENORMOUS_SAMPLE ] ; then
    echo "" >> $TEMP_DIR/err.$$
    echo "Also, the file was considered ENORMOUS so I deleted it." >> $TEMP_DIR/err.$$
    ls -lah $SAMPLEDIR/$FILEDATE >> $TEMP_DIR/err.$$
    echo "" >> $TEMP_DIR/err.$$
    rm -f $SAMPLEDIR/$FILEDATE
  fi

  if [ -f $SAMPLEDIR/$FILEDATE ] ; then
   $GZIP -9 $SAMPLEDIR/$FILEDATE &
  fi

 $MAILPROG -s "[$NETWORK] Garbage or flooded traffic detected" $ALARM_EMAIL < $TEMP_DIR/err.$$
 rm $TEMP_DIR/err.$$

fi

# Dump arps to text file from sample.
# (This takes a while because we have to DNS resolve them all.)
$TSHARK -n -N m -r $SAMPLEDIR/$FILEDATE -Y arp > $TEMP_DIR/arps.$$

# Not arp and not IP (picks up CDP, etc.)
EXPRESSION="not arp and not ip and not ipv6 and not gre and not l2tp"
$TSHARK -n -N m -r $SAMPLEDIR/$FILEDATE -Y "$EXPRESSION" > $TEMP_DIR/notip.$$

# ICMP
$TSHARK -n -r $SAMPLEDIR/$FILEDATE -Y icmp > $TEMP_DIR/icmp.$$

# ICMPv6
$TSHARK -n -r $SAMPLEDIR/$FILEDATE -Y icmpv6 > $TEMP_DIR/icmp6.$$

# IP
$TSHARK -r $SAMPLEDIR/$FILEDATE -Y "ip and not icmp and not arp and not gre and not l2tp" > $TEMP_DIR/ip.$$

# IP6
$TSHARK -r $SAMPLEDIR/$FILEDATE -Y ipv6 > $TEMP_DIR/ip6.$$

# SNMP - this is quite fun. ;-)
$TSHARK -r $SAMPLEDIR/$FILEDATE -Y "snmp and not gre and not l2tp" | awk '{print $3" "$6" "$7 " -"$5}' | sort | uniq -c > $LOG_ROOT/SNMP.LOG

# BGP - Members trying to open BGP to one of our sponged
# addresses will show up here:
if [ $BGPOPENS_OLD_FORMAT = "1" ] ; then
 $TSHARK -n -Y "tcp.flags.syn==1 and tcp.dstport==179 and not icmp" -r $SAMPLEDIR/$FILEDATE | awk '{print $3" -> " $5}' | sort -t\. -k3.1,3.3n -k4n | uniq > $LOG_ROOT/BGPOPENS.LOG
else
 $TSHARK -NnN -T fields -e ip.src -e ip.src_host -e eth.src -e ip.dst -Y "not ipv6 and tcp.flags.syn==1 and tcp.dstport==179 and not icmp" -r $SAMPLEDIR/$FILEDATE | sort -t \. -k3.1,3.3n -k4n | uniq > $LOG_ROOT/BGPOPENS.LOG
fi

# Non-unicast traffic:
# Multicasts and things directed to 255.255.255.255 (IGP/OSPF/Generally bad things)
$TSHARK -n -r $SAMPLEDIR/$FILEDATE -Y "ip.dst >= 224.0.0.0 and not gre and not l2tp" | awk '{print $3" "$4" "$5" "$6" "$7" "$8" "$10" "$11}' | sort -n | uniq -c > $LOG_ROOT/NON_UNICAST.LOG

# Generate summary of ICMPv6 types:
$TSHARK -T fields -e icmpv6.type -r $SAMPLEDIR/$FILEDATE -Y icmpv6.type | sort | uniq -c | awk '{print $2":"$1}' > $TEMP_DIR/icmpv6types.$$

# Generate report of IPV6 Router Advertisements:
$TSHARK -T fields -e ipv6.src -e eth.src_resolved -r $SAMPLEDIR/$FILEDATE -Y "icmpv6.type == 134" | sort | uniq -c | sort -rn > $LOG_ROOT/IPV6_RA.LOG

# Right. We've got all the samples we want in text files,
# Now to summarise the packets samples into reports.

# Take the output from the not ip and munge it to report:
cat $TEMP_DIR/notip.$$ | awk '{print $3" -> "$5" "$6" "$7" "$8" "$9" "$10" "$11" "$12}' | sort | uniq -c | sort -rn > $LOG_ROOT/NOT_IP.LOG

# Create alarms for bad traffic:
cd  $LOG_ROOT/active/

# Non IP Traffic (CDP etc.)
cat $LOG_ROOT/NOT_IP.LOG | sed 's/[^a-zA-Z0-9\ \:\>\-]/_/g' | grep -v "STP " | awk '{print "echo \"Alarm for "$__"\" >"$2"__"$4}' | sh

# Non IP Unicast (OSPF and other IGPs and baddies.)
cat $LOG_ROOT/NON_UNICAST.LOG | awk '{print "echo \"Alarm for "$__"\">"$2"__"$4}' | sh

# IPv6 RA
cat $LOG_ROOT/IPV6_RA.LOG | sed 's/[^a-zA-Z0-9\t\ \:\>\-]/_/g' | awk '{print "echo \"Alarm for IPv6 RA "$__"\" >"$3".ipv6_ra"}' | sh

# Any SNMP we can report?
NUM_SNMP=0

if [ -f $LOG_ROOT/SNMP.LOG ] ; then
 NUM_SNMP=`grep -ci "SNMP " $LOG_ROOT/SNMP.LOG`
fi


if [ "$NUM_SNMP" = "0" ] ; then
 # oh shame. No community strings this time round. ;-)
 rm $LOG_ROOT/SNMP.LOG
fi


if [ "$SPANNING_TREE_BAD" = "1" ] ; then

# Spanning Tree (specific checking because we consider it very very naughty!)
   NUM_STP=`grep -ci "STP " $LOG_ROOT/NOT_IP.LOG`

   if [ ! "$NUM_STP" = "0" ] ; then

   # Generate alarms for STP traffic only:
       grep -i "STP " $LOG_ROOT/NOT_IP.LOG | awk '{print "echo \""$2"\" > "$2"_STP"}' | sh

     for i in $( ls *_STP ); do
        if [ ! -f $LOG_ROOT/alarms/$i ] ; then
        cat $i >> $TEMP_DIR/alarms.tmp
        cat $i >> $TEMP_DIR/alarms_stp.tmp
        cp $i $LOG_ROOT/alarms/
        fi
     done

   else

      if [ -f *_STP ] ; then
       rm -f *_STP
       rm -f $LOG_ROOT/alarms/*_STP
       /usr/bin/logger -p local4.debug -t ixp-watch "[$NETWORK] Spanning tree alarm cleared"
      fi

   fi

fi


for i in $( ls ); do
 if [ ! -f $LOG_ROOT/alarms/$i ] ; then
 cat $i >> $TEMP_DIR/alarms.tmp
 cp $i  $LOG_ROOT/alarms/
 fi
done

# Take the ICMP output and munge it to report:
#
# Old version of tshark:
# grep -vw "$MY_IP" $TEMP_DIR/icmp.$$ | awk '{print $3" "$4" "$5" "$6" "$7" "$8" "$10" "$11}' | sort | uniq -c | sort -rn > $LOG_ROOT/ICMP.LOG
#
# New version of tshark:
grep -vw "$MY_IP" $TEMP_DIR/icmp.$$ | awk '{print $3" "$4" "$5" "$6" "$7" "$8" "$10}' | sort | uniq -c | sort -rn > $LOG_ROOT/ICMP.LOG

# Find arp responses that are not for me, that I'm responding to,
# so they must be sponged addresses.

cat $TEMP_DIR/arps.$$ | grep -vw $MY_IP | grep "is at $MY_ETHER" | awk '{print $5" arping for sponged address "$8}' | sort | uniq -c | sort -rn > $LOG_ROOT/ARPSPONGE.LOG

# Find the top arpers:
# ARP Output has changed for some reason they've bunged an extra word in there: (2013-12)
# grep "Who has" $TEMP_DIR/arps.$$ | awk '{print $11" ("$3") arping for "substr($9,1,length($9)-1)}' | sort | uniq -c | sort -rn | head -30 > $LOG_ROOT/TOP_ARPERS.LOG
grep "Who has" $TEMP_DIR/arps.$$ | awk '{print $12" ("$3") arping for "substr($10,1,length($10)-1)}' | sort | uniq -c | sort -rn | head -30 > $LOG_ROOT/TOP_ARPERS.LOG

# Find the top arps requested:
grep "Who has" $TEMP_DIR/arps.$$ | awk '{print "xxx arping for " substr($10,1,length($10)-1)}' | sort | uniq -c | sort -rn | head -30 > $LOG_ROOT/TOP_ARPREQ.LOG

# Get some counts of things
NUM_ARP=`grep -c "Who has" $TEMP_DIR/arps.$$`
NUM_SPONGE_REPLY=`grep -c "is at $MY_ETHER" $TEMP_DIR/arps.$$`
NUM_NOTIP=`wc -l $TEMP_DIR/notip.$$ |  awk '{print $1}'`
NUM_ICMP=`wc -l $TEMP_DIR/icmp.$$ |  awk '{print $1}'`
NUM_IP=`wc -l $TEMP_DIR/ip.$$ |  awk '{print $1}'`

NUM_IP6=`wc -l $TEMP_DIR/ip6.$$ |  awk '{print $1}'`
NUM_ICMP6=`wc -l $TEMP_DIR/icmp6.$$ |  awk '{print $1}'`

# Breakdown of ICMP types:
NUM_ICMP6_128=`cat $TEMP_DIR/icmpv6types.$$ | grep "^128" | cut -d: -f2`
NUM_ICMP6_129=`cat $TEMP_DIR/icmpv6types.$$ | grep "^129" | cut -d: -f2`
NUM_ICMP6_130=`cat $TEMP_DIR/icmpv6types.$$ | grep "^130" | cut -d: -f2`
NUM_ICMP6_131=`cat $TEMP_DIR/icmpv6types.$$ | grep "^131" | cut -d: -f2`
NUM_ICMP6_132=`cat $TEMP_DIR/icmpv6types.$$ | grep "^132" | cut -d: -f2`
NUM_ICMP6_133=`cat $TEMP_DIR/icmpv6types.$$ | grep "^133" | cut -d: -f2`
NUM_ICMP6_134=`cat $TEMP_DIR/icmpv6types.$$ | grep "^134" | cut -d: -f2`
NUM_ICMP6_135=`cat $TEMP_DIR/icmpv6types.$$ | grep "^135" | cut -d: -f2`
NUM_ICMP6_135=`cat $TEMP_DIR/icmpv6types.$$ | grep "^135" | cut -d: -f2`
NUM_ICMP6_136=`cat $TEMP_DIR/icmpv6types.$$ | grep "^136" | cut -d: -f2`
NUM_ICMP6_137=`cat $TEMP_DIR/icmpv6types.$$ | grep "^137" | cut -d: -f2`
NUM_ICMP6_143=`cat $TEMP_DIR/icmpv6types.$$ | grep "^143" | cut -d: -f2`

NUM_BGP=`wc -l $LOG_ROOT/BGPOPENS.LOG |  awk '{print $1}'`

NUM_MINUTES=`expr $SAMPLE_TIME / 60`

NUM_ARPS_MIN=`expr $NUM_ARP / $NUM_MINUTES`


# Create report
echo "--------------------------------------------------------------------------------" > $LOGDIR/$FILEDATE.TXT
echo "$NETWORK LAN Traffic Summary Report - $ISODATE" >>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT

echo "Analysis based on a sample of $NUM_MINUTES minutes.">>$LOGDIR/$FILEDATE.TXT

echo "Started at $STARTDATE, ended at $STOPDATE">>$LOGDIR/$FILEDATE.TXT
echo "The entire session is saved in:  $SAMPLEDIR/$FILEDATE.gz">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo "ARP Queries......: $NUM_ARP">>$LOGDIR/$FILEDATE.TXT
echo "ARPs per minute..: $NUM_ARPS_MIN">>$LOGDIR/$FILEDATE.TXT
echo "IP Packets.......: $NUM_IP">>$LOGDIR/$FILEDATE.TXT
echo "IP6 Packets......: $NUM_IP6">>$LOGDIR/$FILEDATE.TXT
echo "ICMP Packets.....: $NUM_ICMP">>$LOGDIR/$FILEDATE.TXT
echo "ICMPv6 Packets...: $NUM_ICMP6">>$LOGDIR/$FILEDATE.TXT
echo "NON-IP Packets...: $NUM_NOTIP">>$LOGDIR/$FILEDATE.TXT
echo "ARPs Sponged.....: $NUM_SPONGE_REPLY">>$LOGDIR/$FILEDATE.TXT
echo "Dead BGP Peers...: $NUM_BGP">>$LOGDIR/$FILEDATE.TXT

echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: ICMPv6 TYPE SUMMARY">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT

if [ -n "$NUM_ICMP6_128" ] ; then echo "ICMPv6 128 Echo Request...........................: $NUM_ICMP6_128">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_129" ] ; then echo "ICMPv6 129 Echo Reply.............................: $NUM_ICMP6_129">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_130" ] ; then echo "ICMPv6 130 Multicast Listener Query...............: $NUM_ICMP6_130">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_131" ] ; then echo "ICMPv6 131 Multicast Listener Report..............: $NUM_ICMP6_131">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_132" ] ; then echo "ICMPv6 132 Multicast Listener Done................: $NUM_ICMP6_132">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_133" ] ; then echo "ICMPv6 133 Router Solicitation (NDP)..............: $NUM_ICMP6_133">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_134" ] ; then echo "ICMPv6 134 Router Advertisement (NDP).............: $NUM_ICMP6_134">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_135" ] ; then echo "ICMPv6 135 Neighbor Solicitation (NDP)............: $NUM_ICMP6_135">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_136" ] ; then echo "ICMPv6 136 Neighbor Advertisement (NDP)...........: $NUM_ICMP6_136">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_137" ] ; then echo "ICMPv6 137 Redirect Message (NDP).................: $NUM_ICMP6_137">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_143" ] ; then echo "ICMPv6 143 Multicast Listener Discovery (MLDv2)...: $NUM_ICMP6_143">>$LOGDIR/$FILEDATE.TXT ; fi


echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: TOP 30 ARPERS">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/TOP_ARPERS.LOG>>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: TOP 30 ARPs Requested">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/TOP_ARPREQ.LOG>>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: BGP OPEN ATTEMPTS FOR RECLAIMED/DEAD IP ADDRESSES">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/BGPOPENS.LOG>>$LOGDIR/$FILEDATE.TXT

if [ -f $LOG_ROOT/SNMP.LOG ] ; then
 echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
 echo ":::::: MARTIAN/ODD SNMP  ">>$LOGDIR/$FILEDATE.TXT
 echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/SNMP.LOG>>$LOGDIR/$FILEDATE.TXT
fi

echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: SPONGE ARP REPLY ACTIVITY">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/ARPSPONGE.LOG>>$LOGDIR/$FILEDATE.TXT

echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: NON IP TRAFFIC">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/NOT_IP.LOG >> $LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: NON UNICAST IP TRAFFIC">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/NON_UNICAST.LOG>>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: ICMP MESSAGES">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/ICMP.LOG>>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT

if [ -f $LOG_ROOT/IPV6_RA.LOG ] ; then
echo ":::::: IPv6 ROUTER ADVERTISEMENTS">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/IPV6_RA.LOG >>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
fi


if [ -f $TEMP_DIR/alarms.tmp ] ; then
  # Some new alarms have happened! Mail out the new alarms.
  # (and append to this report)
  echo ":::::: NEW ALARMS SINCE LAST RUN:">>$LOGDIR/$FILEDATE.TXT
  echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
  cat $TEMP_DIR/alarms.tmp >>$LOGDIR/$FILEDATE.TXT
  echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
  $MAILPROG -s "[$NETWORK] Non-IP Traffic Report ($FILEDATE)" $ALARM_EMAIL < $TEMP_DIR/alarms.tmp

 # Do syslog things if defined:

 if [ -n "$LOCAL_FACIL" ] ; then
  cat $TEMP_DIR/alarms.tmp | /usr/bin/logger -p $LOCAL_FACIL -t ixp-watch
 fi

# Note: Redhat/Linux doesn't support the "-h" option for syslog logger.
# instead, use the equivalent "-n" or log to syslog locally.

 if [ -n "$LOGHOST" ] ; then
  # LINUX:
  cat $TEMP_DIR/alarms.tmp | /usr/bin/logger -p $LOG_FACILITY -n $LOGHOST -t ixp-watch
  # FreeBSD:
  # cat $TEMP_DIR/alarms.tmp | /usr/bin/logger -p $LOG_FACILITY -h $LOGHOST -t ixp-watch
 fi

  rm $TEMP_DIR/alarms.tmp
fi

# Copy reports to HTML location if defined:

if [ -n "$HTML_DIR" ] ; then

   if [ ! -d $HTML_DIR ] ; then mkdir -p $HTML_DIR ; fi

		if [ -f "$HTML_DIR/report_4.html" ] ; then
		    rm -f $HTML_DIR/report_4.html
 		fi

		if [ -f "$HTML_DIR/report_3.html" ] ; then
   		mv $HTML_DIR/report_3.html $HTML_DIR/report_4.html
		fi

		if [ -f "$HTML_DIR/report_2.html" ] ; then
			mv $HTML_DIR/report_2.html $HTML_DIR/report_3.html
		fi
		
	  if [ -f "$HTML_DIR/report_1.html" ] ; then
		   mv $HTML_DIR/report_1.html $HTML_DIR/report_2.html
		fi
		   
		cp $LOGDIR/$FILEDATE.TXT $HTML_DIR/report_1.html

fi

# Update RRD files:

if [ $DO_RRD = "1" ] ; then

# Create RRD files if they don't exist:

 if [ ! -d $RRD_DIR ]   ; then mkdir -p $RRD_DIR ; fi
 if [ ! -d $GRAPH_DIR ] ; then mkdir -p $GRAPH_DIR ; fi

if [ ! -f "$RRD_DIR/arp.rrd" ]    ; then $RRDTOOL create $RRD_DIR/arp.rrd --step=900 DS:arp:GAUGE:1800:U:U RRA:AVERAGE:0.5:1:96 ; fi
if [ ! -f "$RRD_DIR/non-ip.rrd" ]  ; then $RRDTOOL create $RRD_DIR/non-ip.rrd --step=900 DS:non-ip:GAUGE:1800:U:U RRA:AVERAGE:0.5:1:96 ; fi
if [ ! -f "$RRD_DIR/icmp.rrd" ]    ; then $RRDTOOL create $RRD_DIR/icmp.rrd --step=900 DS:icmp:GAUGE:1800:U:U RRA:AVERAGE:0.5:1:96 ; fi
if [ ! -f "$RRD_DIR/icmp6.rrd" ]   ; then $RRDTOOL create $RRD_DIR/icmp6.rrd --step=900 DS:icmp6:GAUGE:1800:U:U RRA:AVERAGE:0.5:1:96 ; fi
if [ ! -f "$RRD_DIR/sponge.rrd" ]  ; then $RRDTOOL create $RRD_DIR/sponge.rrd --step=900 DS:sponge:GAUGE:1800:U:U RRA:AVERAGE:0.5:1:96 ; fi
if [ ! -f "$RRD_DIR/deadbgp.rrd" ] ; then $RRDTOOL create $RRD_DIR/deadbgp.rrd --step=900 DS:deadbgp:GAUGE:1800:U:U RRA:AVERAGE:0.5:1:96 ; fi

# Update RRD files with current counters:

# ARP per minute:
$RRDTOOL update $RRD_DIR/arp.rrd $E_DATE:$NUM_ARPS_MIN

# Non IP Packets per Minute:
NUM_NOTIP_MIN=`expr $NUM_NOTIP / $NUM_MINUTES`
$RRDTOOL update $RRD_DIR/non-ip.rrd $E_DATE:$NUM_NOTIP_MIN

# ICMP Packets per Minute:
NUM_ICMP_MIN=`expr $NUM_ICMP / $NUM_MINUTES`
$RRDTOOL update $RRD_DIR/icmp.rrd $E_DATE:$NUM_ICMP_MIN

# ICMPv6 Packets per Minute:
NUM_ICMP6_MIN=`expr $NUM_ICMP6 / $NUM_MINUTES`
$RRDTOOL update $RRD_DIR/icmp6.rrd $E_DATE:$NUM_ICMP6_MIN

# Sponged ARP requests per Minute:
NUM_SPONGE_REPLY_MIN=`expr $NUM_SPONGE_REPLY / $NUM_MINUTES`
$RRDTOOL update $RRD_DIR/sponge.rrd $E_DATE:$NUM_SPONGE_REPLY_MIN

# Dead BGP peers:
NUM_BGP_MIN=`expr $NUM_BGP / $NUM_MINUTES`
$RRDTOOL update $RRD_DIR/deadbgp.rrd $E_DATE:$NUM_BGP_MIN

$RRDTOOL graph $GRAPH_DIR/arp.png --vertical-label arp/min DEF:arpmin=$RRD_DIR/arp.rrd:arp:AVERAGE AREA:arpmin#99CCFF > /dev/null
$RRDTOOL graph $GRAPH_DIR/non-ip.png --vertical-label non-ip/min DEF:non-ip=$RRD_DIR/non-ip.rrd:non-ip:AVERAGE AREA:non-ip#99CCFF > /dev/null
$RRDTOOL graph $GRAPH_DIR/icmp.png --vertical-label ICMP/min DEF:icmp=$RRD_DIR/icmp.rrd:icmp:AVERAGE AREA:icmp#99CCFF > /dev/null
$RRDTOOL graph $GRAPH_DIR/icmp6.png --vertical-label ICMPv6/min DEF:icmp6=$RRD_DIR/icmp6.rrd:icmp6:AVERAGE AREA:icmp6#99CCFF > /dev/null
$RRDTOOL graph $GRAPH_DIR/sponge.png --vertical-label ARPSponge/min DEF:sponge=$RRD_DIR/sponge.rrd:sponge:AVERAGE AREA:sponge#99CCFF > /dev/null
$RRDTOOL graph $GRAPH_DIR/deadbgp.png --vertical-label DeadBGP/min DEF:deadbgp=$RRD_DIR/deadbgp.rrd:deadbgp:AVERAGE AREA:deadbgp#99CCFF > /dev/null

fi


if [ -f $TEMP_DIR/alarms_stp.tmp ] ; then
 $MAILPROG -s "[$NETWORK] Spanning Tree Alarm - Please investigate" $ALARM_PAGER < $TEMP_DIR/alarms_stp.tmp
 $TSHARK -n -r $SAMPLEDIR/$FILEDATE -Y stp >> $TEMP_DIR/alarms_stp.tmp
 $MAILPROG -s "[$NETWORK] Spanning Tree Alarm - Please investigate" $ALARM_EMAIL < $TEMP_DIR/alarms_stp.tmp
 rm $TEMP_DIR/alarms_stp.tmp
 /usr/bin/logger -p local4.debug -t ixp-watch "Spanning tree alarm"
fi


### Excess ARP detection:

if [ $NUM_ARPS_MIN -ge $ARP_WARNLEVEL ] ; then

echo "ARPS Per min is $NUM_ARPS_MIN" > $LOG_ROOT/alarms_arp.tmp

  if [ ! -f $LOG_ROOT/arpstorm.warn ] ; then
   $MAILPROG -s "[$NETWORK] High number of ARPS in progress - Please investigate" $ALARM_PAGER < $LOG_ROOT/alarms_arp.tmp

   echo "" >> $LOG_ROOT/alarms_arp.tmp
   cat $LOGDIR/$FILEDATE.TXT >> $LOG_ROOT/alarms_arp.tmp
   $MAILPROG -s "[$NETWORK] High number of ARPS in progress - Please investigate" $ALARM_EMAIL < $LOG_ROOT/alarms_arp.tmp
   touch $LOG_ROOT/arpstorm.warn
   /usr/bin/logger -p local4.debug -t ixp-watch "[$NETWORK] High number of ARPS in progress - $NUM_ARPS_MIN arps/min"

  fi

else

 # ARP level normal. Remove arp storm detection files if they exist.
  if [ -f $LOG_ROOT/alarms_arp.tmp ] ; then 
    rm -f $LOG_ROOT/alarms_arp.tmp 
  fi

  if [ -f $LOG_ROOT/arpstorm.warn ] ; then 
    rm -f $LOG_ROOT/arpstorm.warn 
    /usr/bin/logger -p local4.debug -t ixp-watch "[$NETWORK] ARP level within normal range - $NUM_ARPS_MIN arps/min"
  fi

fi


# Write metrics to file if we want this:

if [ "$WRITE_COUNTS" = "1" ] ; then

 ### This is how we get the metrics into hostmon to plot graphs and hook
 ### ixp-watch to our monitoring/alerting system.
 ### You could also hack this to pass stats to a SNMPD, Nagios agent, or 
 ### use for generating RRD/mrtg graphs.
 ### Note: not all fields from the report are in here, but you get the idea.
 ### Fields are: <Description> <Value> <Units> <Network>

 echo "ArpPacketCount $NUM_ARP packets $NETWORK" > $COUNTSFILE
 echo "ArpsPerMin $NUM_ARPS_MIN packets $NETWORK" >> $COUNTSFILE
 echo "NonIPPackets $NUM_NOTIP packets $NETWORK"  >> $COUNTSFILE
 echo "DeadBGP $NUM_BGP count $NETWORK"  >> $COUNTSFILE
 echo "ArpSpongeReply $NUM_SPONGE_REPLY count $NETWORK"  >> $COUNTSFILE
 echo "NonIPPackets $NUM_NOTIP packets $NETWORK"  >> $COUNTSFILE
 echo "ICMPpackets $NUM_ICMP packets $NETWORK"  >> $COUNTSFILE
 echo "NumSTP $NUM_STP packets $NETWORK" >> $COUNTSFILE
 echo "ICMP6packets $NUM_ICMP6 packets $NETWORK" >> $COUNTSFILE

fi

# If you want to send full reports to e-mail:

if [ -n "$REPORT_EMAIL" ] ; then
 $MAILPROG -s "[$NETWORK] Traffic Summary Report" $REPORT_EMAIL< $LOGDIR/$FILEDATE.TXT
fi

# Clean up
rm $TEMP_DIR/*.$$

if [ -f $LOG_ROOT/SNMP.LOG ] ; then
 rm $LOG_ROOT/SNMP.LOG
fi

umask 002
# Gzip the sample files. Tshark can read .gz files directly.
if [ -f $SAMPLEDIR/$FILEDATE ] ; then 
   $GZIP -9 $SAMPLEDIR/$FILEDATE & 
fi

if ls $SAMPLEDIR/*.gz 1> /dev/null 2>&1; then
    chmod 664 $SAMPLEDIR/*.gz
fi