#!/bin/bash -v

################################################################################
#### Local configuration. Things you WILL need to check                        #
################################################################################

# REPORT_EMAIL='SOMETHING@YOUR.DOMAIN.HERE' # E-mail to send regular reports to
# (or leave REPORT_EMAIL undefined if you don't want reports)

ALARM_EMAIL='YOU@YOUR.DOMAIN.HERE' # E-mail to send bad thing alarms to

ALARM_PAGER='YOU@YOUR.DOMAIN.HERE' # E-Mail to page things out

MAILPROG=/usr/bin/mail   # command to send e-mails
# (redhat this is /bin/mail by default)

GZIP='nice -n 10 /bin/gzip'       # Location of gzip prog

CAP_INTERFACE=eth0        # Interface that we run the capture on

SAMPLE_TIME=900           # Capture time in seconds (default 15 minutes)

NETWORK='YOUR_NETWORK_HERE'   # Network Name. - some name

# Local syslog facility. Leave blank to turn off.
# (facility must be set up in your syslog.conf of course.)
LOCAL_FACIL=local4.debug


# Remote syslog option. Comment out to disable it.
LOGHOST=                  # optional syslog host to send alerts to
                          # leave blank to log locally instead.
                          # Check the below "/usr/bin/logger" commands to ensure
                          # You are using "-n" or "-h" accordingly for Linux or BSD.

LOG_FACILITY=local4.debug # Facility to send logs to
                          # leave both blank to not log anywhere.

ARP_WARNLEVEL=3000        # Alert when number of ARPS Per Minute reaches this.
                          # You may not know this now, but you can use the reports
                          # to work out what is a reasonable level.

SPANNING_TREE_BAD=1       # Do you want STP frames reported? 1=Yes 0=No.
IPV6=1                    # Do you run IPv4 and IPv6? 1=Yes 0=No.

WRITE_COUNTS=0            # Write counts to /tmp/ixpwatch.$NETWORK.counts?
                          # (useful if you want to plot graphs etc) 1=Yes 0=No.
                          # (See also COUNTSFILE below - you may need to change it!)

MAX_SAMPLE_SIZE=52428800  # Maximum sensible file size to try and process (50M)


DO_RRD=0                  # Plot RRT?
RRDTOOL=/usr/bin/rrdtool  # If so, where is RRDtool?

# Directories to put things in:
# *** These need to exist for this to work properly! ***

SAMPLE_ROOT=/var/ixpwatch/samples
LOG_ROOT=/var/ixpwatch/watch
TEMPDIR=/var/tmp

# Where to put RRD files and HTML files if DO_RRD is enabled:
# (Example of this can be seen at: http://stats.lonap.net/ixpwatch/)
RRD_DIR=/var/www/ixpwatch/graphs
GRAPH_DIR=/var/www/ixpwatch/graphs
HTMLDIR=/var/www/ixpwatch/

# Where to find tshark:
# (I'm going to trust this as correct.)
TSHARK=/usr/bin/tshark


######### WILL NEED TO BE CHANGED TO SUIT YOUR OS:

# Find out what my IP Address is:

# On FreeBSD this is:
# MY_IP=`/sbin/ifconfig $CAP_INTERFACE | grep "inet " | head -1 | cut -d ' ' -f2`

# On Linux you do:
MY_IP=`/sbin/ifconfig $CAP_INTERFACE | grep "inet addr" | awk '{print $2}' | cut -d: -f2`

# On Solaris this is:
# MY_IP=`/usr/sbin/ifconfig $CAP_INTERFACE | grep "inet " | head -1 | cut -d ' ' -f2`

# Or the even simpler "hostname -i" _might_ return the correct IP :-)

######### WILL NEED TO BE CHANGED TO SUIT YOUR OS:
# Find out what my ethernet address is:
# FreeBSD this is:
# MY_ETHER=`/sbin/ifconfig $CAP_INTERFACE | grep ether | awk '{print $2}'`

# Linux This is:
MY_ETHER=`/sbin/ifconfig $CAP_INTERFACE | grep "HWaddr " | awk '{print $5}' | tr [A-Z] [a-z]`

# On Solaris this is:
# MY_ETHER=`/usr/sbin/arp -a | grep " $CAP_INTERFACE" | awk '{print $5}'`

################################################################################
### Sys configuration - things you MIGHT need to tweak. Generally okay.        #
################################################################################
umask 002

YEAR=`date "+%Y"`
MONTH=`date "+%m"`
DAY=`date "+%d"`

SAMPLEDIR=$SAMPLE_ROOT/$YEAR/$MONTH/$DAY
LOGDIR=$LOG_ROOT/$YEAR/$MONTH/$DAY

ISODATE=$YEAR-$MONTH-$DAY

E_DATE=`date +%s`  # Epoch UNIX date (for RRD graphs updates)
FILEDATE=`date "+%Y-%m-%d-%H-%M"`  # Use as basis for file name. Do not change.
STARTDATE=`date "+%Y-%m-%d %H:%M"` # Date used in reports. Adjust to taste.

LOGFILE=$TEMPDIR/ixp-watch.log

# Where to write stats counts to, (if enabled)
# If you use my format, make sure what you've got in $NETWORK won't break
# the filename (no "/ | or nasty chars or spaces etc.)
# You don't _have_ to use this filename though :-)

COUNTSFILE=$TEMPDIR/ixp-watch.$NETWORK.counts

# You may need to check SAMPLESIZE below in this script, if your ls -la
# output is not the usual format. (Works on debian and other linux okay)

################################################################################
### Main script                                                             ####
################################################################################

# Check that state alarms and current directories exist.
# This is for the checking of "new" bad traffic as opposed to
# traffic we've seen before.
# Simple diff between the two dirs generates new alarms spotted.

if [ ! -d $LOG_ROOT/alarms ] ; then mkdir $LOG_ROOT/alarms ; fi
if [ ! -d $LOG_ROOT/active ] ; then mkdir $LOG_ROOT/active ; fi

# When needed, create various file storage directories.
# Put this in because the single log/sample directory idea
# Wasn't scaling very well - many thousands of files in
# one directory was becoming very tedious to deal with!

if [ ! -d $LOG_ROOT/$YEAR ] ; then mkdir $LOG_ROOT/$YEAR ; fi
if [ ! -d $LOG_ROOT/$YEAR/$MONTH ] ; then mkdir $LOG_ROOT/$YEAR/$MONTH ; fi

# create today's dirs, with some helpful symlinks to make
# it quick to find todays files.

if [ ! -d $LOG_ROOT/$YEAR/$MONTH/$DAY ] ; then
  mkdir $LOG_ROOT/$YEAR/$MONTH/$DAY
  rm -f $LOG_ROOT/yesterday # This does *NOT* clobber the files, just the symbolic link
  mv $LOG_ROOT/today $LOG_ROOT/yesterday
  rm -f $LOG_ROOT/today
  ln -s $LOG_ROOT/$YEAR/$MONTH/$DAY $LOG_ROOT/today
fi

if [ ! -d $SAMPLE_ROOT/$YEAR ] ; then mkdir $SAMPLE_ROOT/$YEAR ; fi
if [ ! -d $SAMPLE_ROOT/$YEAR/$MONTH ] ; then mkdir $SAMPLE_ROOT/$YEAR/$MONTH ; fi

if [ ! -d $SAMPLE_ROOT/$YEAR/$MONTH/$DAY ] ; then
  mkdir $SAMPLE_ROOT/$YEAR/$MONTH/$DAY
  rm -f $SAMPLE_ROOT/yesterday
  mv $SAMPLE_ROOT/today $SAMPLE_ROOT/yesterday
  rm -f $SAMPLE_ROOT/today
  ln -s $SAMPLE_ROOT/$YEAR/$MONTH/$DAY $SAMPLE_ROOT/today
fi

# Start sample capture

# Older versions of tshark:
# $TSHARK -q -i $CAP_INTERFACE -a duration:$SAMPLE_TIME -w $SAMPLEDIR/$FILEDATE not host $MY_IP

# Newer versions of tshark require -f "<capture_filter>"
$TSHARK -q -i $CAP_INTERFACE -a duration:$SAMPLE_TIME -w $SAMPLEDIR/$FILEDATE -f "not host $MY_IP"


STOPDATE=`date "+%Y-%m-%d %H:%M"`

if [ ! -f $SAMPLEDIR/$FILEDATE ] ; then
 echo "Error: sample file $SAMPLEDIR/$FILEDATE could not be opened."
 echo "$STARTDATE: Error: sample file $SAMPLEDIR/$FILEDATE could not be opened." >> $LOGFILE
 exit 1
fi

SAMPLESIZE=`ls -la $SAMPLEDIR/$FILEDATE | awk '{print $5}'`

if [ $SAMPLESIZE -ge $MAX_SAMPLE_SIZE ] ; then

 echo "Error: sample file $SAMPLEDIR/$FILEDATE too big to process." > $TEMPDIR/err.$$
 echo "$SAMPLESIZE bigger than MAX_SAMPLE_SIZE $MAX_SAMPLE_SIZE" >> $TEMPDIR/err.$$
 echo "The sample file will NOT be processed by ixp-watch." >> $TEMPDIR/err.$$
 echo "" >> $TEMPDIR/err.$$
 echo "This may be caused by a member port going down, or as a result of other trouble." >> $TEMPDIR/err.$$
 echo "If this error persists, you should run some sniffs on the network to find out" >> $TEMPDIR/err.$$
 echo "what the source of the traffic spew is." >> $TEMPDIR/err.$$

# If the file is too enormous, then just delete it.
ENORMOUS_SAMPLE=`expr $MAX_SAMPLE_SIZE \* 10`

  if [ $SAMPLESIZE -ge $ENORMOUS_SAMPLE ] ; then
    echo "" >> $TEMPDIR/err.$$
    echo "Also, the file was considered ENORMOUS so I deleted it." >> $TEMPDIR/err.$$
    ls -lah $SAMPLEDIR/$FILEDATE >> $TEMPDIR/err.$$
    echo "" >> $TEMPDIR/err.$$
    rm -f $SAMPLEDIR/$FILEDATE
  fi

  if [ -f $SAMPLEDIR/$FILEDATE ] ; then
   $GZIP -9 $SAMPLEDIR/$FILEDATE &
  fi

 $MAILPROG -s "[$NETWORK] Garbage or flooded traffic detected" $ALARM_EMAIL < $TEMPDIR/err.$$
 rm $TEMPDIR/err.$$

fi


# Dump arps to text file from sample.
# (This takes a while because we have to DNS resolve them all.)
$TSHARK -n -N m -r $SAMPLEDIR/$FILEDATE -Y arp > $TEMPDIR/arps.$$

# Not arp and not IP (picks up CDP, etc.)
EXPRESSION="not arp and not ip"
[ $IPV6 = 1 ] && EXPRESSION="not arp and not ip and not ipv6 and not gre and not l2tp"
$TSHARK -n -N m -r $SAMPLEDIR/$FILEDATE -Y "$EXPRESSION" > $TEMPDIR/notip.$$

# ICMP
$TSHARK -n -r $SAMPLEDIR/$FILEDATE -Y icmp > $TEMPDIR/icmp.$$

# ICMPv6
$TSHARK -n -r $SAMPLEDIR/$FILEDATE -Y icmpv6 > $TEMPDIR/icmp6.$$

# IP
$TSHARK -r $SAMPLEDIR/$FILEDATE -Y "ip and not icmp and not arp and not gre and not l2tp" > $TEMPDIR/ip.$$

# IP6
$TSHARK -r $SAMPLEDIR/$FILEDATE -Y ipv6 > $TEMPDIR/ip6.$$

# SNMP - this is quite fun. ;-)
$TSHARK -r $SAMPLEDIR/$FILEDATE -Y "snmp and not gre and not l2tp" | awk '{print $3" "$6" "$7 " -"$5}' | sort | uniq -c > $LOG_ROOT/SNMP.LOG

# BGP - Members trying to open BGP to one of our sponged
# addresses will show up here:
$TSHARK -n -Y "tcp.flags.syn==1 and tcp.dstport==179 and not icmp" -r $SAMPLEDIR/$FILEDATE | awk '{print $3" -> " $5}' | sort -t\. -k3.1,3.3n -k4n | uniq > $LOG_ROOT/BGPOPENS.LOG

# Non-unicast traffic:
# Multicasts and things directed to 255.255.255.255 (IGP/OSPF/Generally bad things)
$TSHARK -n -r $SAMPLEDIR/$FILEDATE -Y "ip.dst >= 223.0.0.0 and not gre and not l2tp" | awk '{print $3" "$4" "$5" "$6" "$7" "$8" "$10" "$11}' | sort -n | uniq -c > $LOG_ROOT/NON_UNICAST.LOG

# Generate summary of ICMPv6 types:
[ $IPV6 = 1 ] && $TSHARK -T fields -e icmpv6.type -r $SAMPLEDIR/$FILEDATE -Y icmpv6.type | sort | uniq -c | awk '{print $2":"$1}' > $TEMPDIR/icmpv6types.$$

# Right. We've got all the samples we want in text files,
# Now to summarise the packets samples into reports.

# Take the output from the not ip and munge it to report:
cat $TEMPDIR/notip.$$ | awk '{print $3" -> "$5" "$6" "$7" "$8" "$9" "$10" "$11" "$12}' | sort | uniq -c | sort -rn > $LOG_ROOT/NOT_IP.LOG

# Create alarms for bad traffic:
cd  $LOG_ROOT/active/

# Non IP Traffic (CDP etc.)
cat $LOG_ROOT/NOT_IP.LOG | sed 's/\// /g' | grep -v "STP " | awk '{print "echo \"Alarm for "$__"\" >"$2"__"$4}' | sh

# Non IP Unicast (OSPF and other IGPs and baddies.)
cat $LOG_ROOT/NON_UNICAST.LOG | awk '{print "echo \"Alarm for "$__"\">"$2"__"$4}' | sh

# Any SNMP we can report?

if [ -f $LOG_ROOT/SNMP.LOG ] ; then
 NUM_SNMP=`grep -ci "SNMP " $LOG_ROOT/SNMP.LOG`
fi


if [ "$NUM_SNMP" = "0" ] ; then
 # oh shame. No community strings this time round. ;-)
 rm $LOG_ROOT/SNMP.LOG
fi


if [ "$SPANNING_TREE_BAD" = "1" ] ; then

# Spanning Tree (specific checking because we consider it very very naughty!)
   NUM_STP=`grep -ci "STP " $LOG_ROOT/NOT_IP.LOG`

   if [ ! "$NUM_STP" = "0" ] ; then

   # Generate alarms for STP traffic only:
       grep -i "STP " $LOG_ROOT/NOT_IP.LOG | awk '{print "echo \""$2"\" > "$2"_STP"}' | sh

     for i in $( ls *_STP ); do
        if [ ! -f $LOG_ROOT/alarms/$i ] ; then
        cat $i >> $TEMPDIR/alarms.tmp
        cat $i >> $TEMPDIR/alarms_stp.tmp
        cp $i $LOG_ROOT/alarms/
        fi
     done

   else

      if [ -f *_STP ] ; then
       rm -f *_STP
       rm -f $LOG_ROOT/alarms/*_STP
       /usr/bin/logger -p local4.debug -t ixp-watch "[$NETWORK] Spanning tree alarm cleared"
      fi

   fi

fi


for i in $( ls ); do
 if [ ! -f $LOG_ROOT/alarms/$i ] ; then
 cat $i >> $TEMPDIR/alarms.tmp
 cp $i  $LOG_ROOT/alarms/
 fi
done

# Take the ICMP output and munge it to report:
#
# Old version of tshark:
# grep -v "$MY_IP" $TEMPDIR/icmp.$$ | awk '{print $3" "$4" "$5" "$6" "$7" "$8" "$10" "$11}' | sort | uniq -c | sort -rn > $LOG_ROOT/ICMP.LOG
#
# New version of tshark:
grep -v "$MY_IP" $TEMPDIR/icmp.$$ | awk '{print $3" "$4" "$5" "$6" "$7" "$8" "$10}' | sort | uniq -c | sort -rn > $LOG_ROOT/ICMP.LOG

# Find arp responses that are not for me, that I'm responding to,
# so they must be sponged addresses.

cat $TEMPDIR/arps.$$ | grep -v $MY_IP | grep "is at $MY_ETHER" | awk '{print $5" arping for sponged address "$8}' | sort | uniq -c | sort -rn > $LOG_ROOT/ARPSPONGE.LOG

# Find the top arpers:
# ARP Output has changed for some reason they've bunged an extra word in there: (2013-12)
# grep "Who has" $TEMPDIR/arps.$$ | awk '{print $11" ("$3") arping for "substr($9,1,length($9)-1)}' | sort | uniq -c | sort -rn | head -30 > $LOG_ROOT/TOP_ARPERS.LOG
grep "Who has" $TEMPDIR/arps.$$ | awk '{print $12" ("$3") arping for "substr($10,1,length($10)-1)}' | sort | uniq -c | sort -rn | head -30 > $LOG_ROOT/TOP_ARPERS.LOG

# Find the top arps requested:
grep "Who has" $TEMPDIR/arps.$$ | awk '{print "xxx arping for " substr($10,1,length($10)-1)}' | sort | uniq -c | sort -rn | head -30 > $LOG_ROOT/TOP_ARPREQ.LOG

# Get some counts of things
NUM_ARP=`grep -c "Who has" $TEMPDIR/arps.$$`
NUM_SPONGE_REPLY=`grep -c "is at $MY_ETHER" $TEMPDIR/arps.$$`
NUM_NOTIP=`wc -l $TEMPDIR/notip.$$ |  awk '{print $1}'`
NUM_ICMP=`wc -l $TEMPDIR/icmp.$$ |  awk '{print $1}'`
NUM_IP=`wc -l $TEMPDIR/ip.$$ |  awk '{print $1}'`

[ $IPV6 = 1 ] && NUM_IP6=`wc -l $TEMPDIR/ip6.$$ |  awk '{print $1}'`
[ $IPV6 = 1 ] && NUM_ICMP6=`wc -l $TEMPDIR/icmp6.$$ |  awk '{print $1}'`

# Breakdown of ICMP types:
[ $IPV6 = 1 ] && NUM_ICMP6_128=`cat $TEMPDIR/icmpv6types.$$ | grep "^128" | cut -d: -f2`
[ $IPV6 = 1 ] && NUM_ICMP6_129=`cat $TEMPDIR/icmpv6types.$$ | grep "^129" | cut -d: -f2`
[ $IPV6 = 1 ] && NUM_ICMP6_130=`cat $TEMPDIR/icmpv6types.$$ | grep "^130" | cut -d: -f2`
[ $IPV6 = 1 ] && NUM_ICMP6_131=`cat $TEMPDIR/icmpv6types.$$ | grep "^131" | cut -d: -f2`
[ $IPV6 = 1 ] && NUM_ICMP6_132=`cat $TEMPDIR/icmpv6types.$$ | grep "^132" | cut -d: -f2`
[ $IPV6 = 1 ] && NUM_ICMP6_133=`cat $TEMPDIR/icmpv6types.$$ | grep "^133" | cut -d: -f2`
[ $IPV6 = 1 ] && NUM_ICMP6_134=`cat $TEMPDIR/icmpv6types.$$ | grep "^134" | cut -d: -f2`
[ $IPV6 = 1 ] && NUM_ICMP6_135=`cat $TEMPDIR/icmpv6types.$$ | grep "^135" | cut -d: -f2`
[ $IPV6 = 1 ] && NUM_ICMP6_135=`cat $TEMPDIR/icmpv6types.$$ | grep "^135" | cut -d: -f2`
[ $IPV6 = 1 ] && NUM_ICMP6_136=`cat $TEMPDIR/icmpv6types.$$ | grep "^136" | cut -d: -f2`
[ $IPV6 = 1 ] && NUM_ICMP6_137=`cat $TEMPDIR/icmpv6types.$$ | grep "^137" | cut -d: -f2`
[ $IPV6 = 1 ] && NUM_ICMP6_143=`cat $TEMPDIR/icmpv6types.$$ | grep "^143" | cut -d: -f2`

NUM_BGP=`wc -l $LOG_ROOT/BGPOPENS.LOG |  awk '{print $1}'`

NUM_MINUTES=`expr $SAMPLE_TIME / 60`

NUM_ARPS_MIN=`expr $NUM_ARP / $NUM_MINUTES`


# Create report
echo "--------------------------------------------------------------------------------" > $LOGDIR/$FILEDATE.TXT
echo "$NETWORK LAN Traffic Summary Report - $ISODATE" >>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT

echo "Analysis based on a sample of $NUM_MINUTES minutes.">>$LOGDIR/$FILEDATE.TXT

echo "Started at $STARTDATE, ended at $STOPDATE">>$LOGDIR/$FILEDATE.TXT
echo "The entire session is saved in:  $SAMPLEDIR/$FILEDATE.gz">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo "ARP Queries......: $NUM_ARP">>$LOGDIR/$FILEDATE.TXT
echo "ARPs per minute..: $NUM_ARPS_MIN">>$LOGDIR/$FILEDATE.TXT
echo "IP Packets.......: $NUM_IP">>$LOGDIR/$FILEDATE.TXT
[ $IPV6 = 1 ] && echo "IP6 Packets......: $NUM_IP6">>$LOGDIR/$FILEDATE.TXT
echo "ICMP Packets.....: $NUM_ICMP">>$LOGDIR/$FILEDATE.TXT
[ $IPV6 = 1 ] && echo "ICMPv6 Packets...: $NUM_ICMP6">>$LOGDIR/$FILEDATE.TXT
echo "NON-IP Packets...: $NUM_NOTIP">>$LOGDIR/$FILEDATE.TXT
echo "ARPs Sponged.....: $NUM_SPONGE_REPLY">>$LOGDIR/$FILEDATE.TXT
echo "Dead BGP Peers...: $NUM_BGP">>$LOGDIR/$FILEDATE.TXT

if [ "$IPV6" == "1" ] ; then
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: ICMPv6 TYPE SUMMARY">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT

if [ -n "$NUM_ICMP6_128" ] ; then echo "ICMPv6 128 Echo Request...........................: $NUM_ICMP6_128">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_129" ] ; then echo "ICMPv6 129 Echo Reply.............................: $NUM_ICMP6_129">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_130" ] ; then echo "ICMPv6 130 Multicast Listener Query...............: $NUM_ICMP6_130">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_131" ] ; then echo "ICMPv6 131 Multicast Listener Report..............: $NUM_ICMP6_131">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_132" ] ; then echo "ICMPv6 132 Multicast Listener Done................: $NUM_ICMP6_132">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_133" ] ; then echo "ICMPv6 133 Router Solicitation (NDP)..............: $NUM_ICMP6_133">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_134" ] ; then echo "ICMPv6 134 Router Advertisement (NDP).............: $NUM_ICMP6_134">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_135" ] ; then echo "ICMPv6 135 Neighbor Solicitation (NDP)............: $NUM_ICMP6_135">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_136" ] ; then echo "ICMPv6 136 Neighbor Advertisement (NDP)...........: $NUM_ICMP6_136">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_137" ] ; then echo "ICMPv6 137 Redirect Message (NDP).................: $NUM_ICMP6_137">>$LOGDIR/$FILEDATE.TXT ; fi
if [ -n "$NUM_ICMP6_143" ] ; then echo "ICMPv6 143 Multicast Listener Discovery (MLDv2)...: $NUM_ICMP6_143">>$LOGDIR/$FILEDATE.TXT ; fi

fi

echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: TOP 30 ARPERS">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/TOP_ARPERS.LOG>>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: TOP 30 ARPs Requested">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/TOP_ARPREQ.LOG>>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: BGP OPEN ATTEMPTS FOR RECLAIMED/DEAD IP ADDRESSES">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/BGPOPENS.LOG>>$LOGDIR/$FILEDATE.TXT

if [ -f $LOG_ROOT/SNMP.LOG ] ; then
 echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
 echo ":::::: MARTIAN/ODD SNMP  ">>$LOGDIR/$FILEDATE.TXT
 echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/SNMP.LOG>>$LOGDIR/$FILEDATE.TXT
fi

echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: SPONGE ARP REPLY ACTIVITY">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/ARPSPONGE.LOG>>$LOGDIR/$FILEDATE.TXT

echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: NON IP TRAFFIC">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/NOT_IP.LOG >> $LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: NON UNICAST IP TRAFFIC">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/NON_UNICAST.LOG>>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
echo ":::::: ICMP MESSAGES">>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
cat $LOG_ROOT/ICMP.LOG>>$LOGDIR/$FILEDATE.TXT
echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT

if [ -f $TEMPDIR/alarms.tmp ] ; then
  # Some new alarms have happened! Mail out the new alarms.
  # (and append to this report)
  echo ":::::: NEW ALARMS SINCE LAST RUN:">>$LOGDIR/$FILEDATE.TXT
  echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
  cat $TEMPDIR/alarms.tmp >>$LOGDIR/$FILEDATE.TXT
  echo "--------------------------------------------------------------------------------">>$LOGDIR/$FILEDATE.TXT
  $MAILPROG -s "[$NETWORK] Non-IP Traffic Report ($FILEDATE)" $ALARM_EMAIL < $TEMPDIR/alarms.tmp

 # Do syslog things if defined:

 if [ ! "$LOCAL_FACIL" = "" ] ; then
  cat $TEMPDIR/alarms.tmp | /usr/bin/logger -p $LOCAL_FACIL -t ixp-watch
 fi

# Note: Redhat/Linux doesn't support the "-h" option for syslog logger.
# instead, use the equivalent "-n" or log to syslog locally.

 if [ ! "$LOGHOST" = "" ] ; then
  # LINUX:
  # cat $TEMPDIR/alarms.tmp | /usr/bin/logger -p $LOG_FACILITY -n $LOGHOST -t ixp-watch
  # FreeBSD:
  cat $TEMPDIR/alarms.tmp | /usr/bin/logger -p $LOG_FACILITY -h $LOGHOST -t ixp-watch
 fi

  rm $TEMPDIR/alarms.tmp
fi

# Copy reports to HTML location if defined:

if [ ! "$HTMLDIR" = "" ] ; then

		if [ -f "$HTMLDIR/report_4.html" ] ; then
		    rm -f $HTMLDIR/report_4.html
 		fi

		if [ -f "$HTMLDIR/report_3.html" ] ; then
   		mv $HTMLDIR/report_3.html $HTMLDIR/report_4.html
		fi

		if [ -f "$HTMLDIR/report_2.html" ] ; then
			mv $HTMLDIR/report_2.html $HTMLDIR/report_3.html
		fi
		
	  if [ -f "$HTMLDIR/report_1.html" ] ; then
		   mv $HTMLDIR/report_1.html $HTMLDIR/report_2.html
		fi
		   
		cp $LOGDIR/$FILEDATE.TXT $HTMLDIR/report_1.html

fi

# Update RRD files:

if [ $DO_RRD = "1" ] ; then

# Create RRD files if they don't exist:

 if [ ! -d $RRD_DIR ] ; then mkdir $RRD_DIR ; fi

if [ ! -f "$RRD_DIR/arp.rrd" ]    ; then $RRDTOOL create $RRD_DIR/arp.rrd --step=900 DS:arp:GAUGE:1800:U:U RRA:AVERAGE:0.5:1:96 ; fi
if [ ! -f "$RRD_DIR/non-ip.rrd"]  ; then $RRDTOOL create $RRD_DIR/non-ip.rrd --step=900 DS:non-ip:GAUGE:1800:U:U RRA:AVERAGE:0.5:1:96 ; fi
if [ ! -f "$RRD_DIR/icmp.rrd"]    ; then $RRDTOOL create $RRD_DIR/icmp.rrd --step=900 DS:icmp:GAUGE:1800:U:U RRA:AVERAGE:0.5:1:96 ; fi
if [ ! -f "$RRD_DIR/icmp6.rrd"]   ; then $RRDTOOL create $RRD_DIR/icmp6.rrd --step=900 DS:icmp6:GAUGE:1800:U:U RRA:AVERAGE:0.5:1:96 ; fi
if [ ! -f "$RRD_DIR/sponge.rrd"]  ; then $RRDTOOL create $RRD_DIR/sponge.rrd --step=900 DS:sponge:GAUGE:1800:U:U RRA:AVERAGE:0.5:1:96 ; fi
if [ ! -f "$RRD_DIR/deadbgp.rrd"] ; then $RRDTOOL create $RRD_DIR/deadbgp.rrd --step=900 DS:deadbgp:GAUGE:1800:U:U RRA:AVERAGE:0.5:1:96 ; fi

# Update RRD files with current counters:

# ARP per minute:
$RRDTOOL update $RRD_DIR/arp.rrd $E_DATE:$NUM_ARPS_MIN

# Non IP Packets per Minute:
NUM_NOTIP_MIN=`expr $NUM_NOTIP / $NUM_MINUTES`
$RRDTOOL update $RRD_DIR/non-ip.rrd $E_DATE:$NUM_NOTIP_MIN

# ICMP Packets per Minute:
NUM_ICMP_MIN=`expr $NUM_ICMP / $NUM_MINUTES`
$RRDTOOL update $RRD_DIR/icmp.rrd $E_DATE:$NUM_ICMP_MIN

# ICMPv6 Packets per Minute:
NUM_ICMP6_MIN=`expr $NUM_ICMP6 / $NUM_MINUTES`
$RRDTOOL update $RRD_DIR/icmp6.rrd $E_DATE:$NUM_ICMP6_MIN

# Sponged ARP requests per Minute:
NUM_SPONGE_REPLY_MIN=`expr $NUM_SPONGE_REPLY / $NUM_MINUTES`
$RRDTOOL update $RRD_DIR/sponge.rrd $E_DATE:$NUM_SPONGE_REPLY_MIN

# Dead BGP peers:
$RRDTOOL update $RRD_DIR/deadbgp.rrd $E_DATE:$NUM_BGP

$RRDTOOL graph $GRAPH_DIR/arp.png --vertical-label arp/min DEF:arpmin=$RRD_DIR/arp.rrd:arp:AVERAGE AREA:arpmin#99CCFF
$RRDTOOL graph $GRAPH_DIR/non-ip.png --vertical-label non-ip/min DEF:non-ip=$RRD_DIR/non-ip.rrd:non-ip:AVERAGE AREA:non-ip#99CCFF
$RRDTOOL graph $GRAPH_DIR/icmp.png --vertical-label ICMP/min DEF:icmp=$RRD_DIR/icmp.rrd:icmp:AVERAGE AREA:icmp#99CCFF
$RRDTOOL graph $GRAPH_DIR/icmp6.png --vertical-label ICMPv6/min DEF:icmp6=$RRD_DIR/icmp6.rrd:icmp6:AVERAGE AREA:icmp6#99CCFF
$RRDTOOL graph $GRAPH_DIR/sponge.png --vertical-label ARPSponge/min DEF:sponge=$RRD_DIR/sponge.rrd:sponge:AVERAGE AREA:sponge#99CCFF
$RRDTOOL graph $GRAPH_DIR/deadbgp.png --vertical-label DeadBGP/15min DEF:deadbgp=$RRD_DIR/deadbgp.rrd:deadbgp:AVERAGE AREA:deadbgp#99CCFF

fi


if [ -f $TEMPDIR/alarms_stp.tmp ] ; then
 $MAILPROG -s "[$NETWORK] Spanning Tree Alarm - Please investigate" $ALARM_PAGER < $TEMPDIR/alarms_stp.tmp
 $TSHARK -n -r $SAMPLEDIR/$FILEDATE -Y stp >> $TEMPDIR/alarms_stp.tmp
 $MAILPROG -s "[$NETWORK] Spanning Tree Alarm - Please investigate" $ALARM_EMAIL < $TEMPDIR/alarms_stp.tmp
 rm $TEMPDIR/alarms_stp.tmp
 /usr/bin/logger -p local4.debug -t ixp-watch "Spanning tree alarm"
fi


### Excess ARP detection:

if [ $NUM_ARPS_MIN -ge $ARP_WARNLEVEL ] ; then

echo "ARPS Per min is $NUM_ARPS_MIN" > $LOG_ROOT/alarms_arp.tmp

  if [ ! -f $LOG_ROOT/arpstorm.warn ] ; then
   $MAILPROG -s "[$NETWORK] High number of ARPS in progress - Please investigate" $ALARM_PAGER < $LOG_ROOT/alarms_arp.tmp

   echo "" >> $LOG_ROOT/alarms_arp.tmp
   cat $LOGDIR/$FILEDATE.TXT >> $LOG_ROOT/alarms_arp.tmp
   $MAILPROG -s "[$NETWORK] High number of ARPS in progress - Please investigate" $ALARM_EMAIL < $LOG_ROOT/alarms_arp.tmp
   touch $LOG_ROOT/arpstorm.warn
   /usr/bin/logger -p local4.debug -t ixp-watch "[$NETWORK] High number of ARPS in progress ($NUM_ARPS_MIN arps/min)"

  fi

else

 # ARP level normal. Remove arp storm detection files if they exist.
  if [ -f $LOG_ROOT/alarms_arp.tmp ] ; then 
    rm -f $LOG_ROOT/alarms_arp.tmp 
  fi

  if [ -f $LOG_ROOT/arpstorm.warn ] ; then 
    rm -f $LOG_ROOT/arpstorm.warn 
    /usr/bin/logger -p local4.debug -t ixp-watch "[$NETWORK] ARP level within normal range ($NUM_ARPS_MIN arps/min)"
  fi

fi


# Write metrics to file if we want this:

if [ "$WRITE_COUNTS" = "1" ] ; then

 ### This is how we get the metrics into hostmon to plot graphs and hook
 ### ixp-watch to our monitoring/alerting system.
 ### You could also hack this to pass stats to a SNMPD, Nagios agent, or 
 ### use for generating RRD/mrtg graphs.
 ### Note: not all fields from the report are in here, but you get the idea.
 ### Fields are: <Description> <Value> <Units> <Network>

 echo "ArpPacketCount $NUM_ARP packets $NETWORK" > $COUNTSFILE
 echo "ArpsPerMin $NUM_ARPS_MIN packets $NETWORK" >> $COUNTSFILE
 echo "NonIPPackets $NUM_NOTIP packets $NETWORK"  >> $COUNTSFILE
 echo "DeadBGP $NUM_BGP count $NETWORK"  >> $COUNTSFILE
 echo "ArpSpongeReply $NUM_SPONGE_REPLY count $NETWORK"  >> $COUNTSFILE
 echo "NonIPPackets $NUM_NOTIP packets $NETWORK"  >> $COUNTSFILE
 echo "ICMPpackets $NUM_ICMP packets $NETWORK"  >> $COUNTSFILE
 echo "NumSTP $NUM_STP packets $NETWORK" >> $COUNTSFILE
 echo "ICMP6packets $NUM_ICMP6 packets $NETWORK" >> $COUNTSFILE

fi

# If you want to store these reports in an e-mail account.
# We used to implement this to save these on our web site by e-mailing
# them to a special alias on the web server which then takes the e-mail
# and files it on the web site.

if [ ! "$REPORT_EMAIL" = "" ] ; then
 $MAILPROG -s "[$NETWORK] Traffic Summary Report" $REPORT_EMAIL< $LOGDIR/$FILEDATE.TXT
fi

# Clean up
rm $TEMPDIR/*.$$

if [ -f $LOG_ROOT/SNMP.LOG ] ; then
 rm $LOG_ROOT/SNMP.LOG
fi

umask 002
# Gzip the sample files. Tshark can read .gz files directly.
$GZIP -9 $SAMPLEDIR/$FILEDATE &
chmod 664 $SAMPLEDIR/*.gz

